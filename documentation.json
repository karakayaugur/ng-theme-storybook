{
    "pipes": [],
    "interfaces": [
        {
            "name": "IReqLogin",
            "id": "interface-IReqLogin-98fbedcf33cf19d4cabe8e9f5eeaa6fdeb615620a8c6609d334ecd4c609f4ee18045e566c430e643cf707b0ff1111a90b06531f94f82a18327132f7fee45c754",
            "file": "src/app/core/http/register/register.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IReqLogin {\n  username: string;\n  password: string;\n}\n\nexport interface IResLogin {\n  access_token: string;\n  expires_in: number;\n  mfa_address: string;\n  mfa_channel: 'SMS' | 'EMAIL';\n  mfa_id: string;\n  token_type: 'mfa' | 'bearer' | 'refresh';\n}\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IReqLogin",
            "id": "interface-IReqLogin-98fbedcf33cf19d4cabe8e9f5eeaa6fdeb615620a8c6609d334ecd4c609f4ee18045e566c430e643cf707b0ff1111a90b06531f94f82a18327132f7fee45c754-1",
            "file": "src/app/core/http/sign-in/sign-in.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IReqLogin {\n  username: string;\n  password: string;\n}\n\nexport interface IResLogin {\n  access_token: string;\n  expires_in: number;\n  mfa_address: string;\n  mfa_channel: 'SMS' | 'EMAIL';\n  mfa_id: string;\n  token_type: 'mfa' | 'bearer' | 'refresh';\n}\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IReqLogin-1"
        },
        {
            "name": "IResLogin",
            "id": "interface-IResLogin-98fbedcf33cf19d4cabe8e9f5eeaa6fdeb615620a8c6609d334ecd4c609f4ee18045e566c430e643cf707b0ff1111a90b06531f94f82a18327132f7fee45c754",
            "file": "src/app/core/http/register/register.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IReqLogin {\n  username: string;\n  password: string;\n}\n\nexport interface IResLogin {\n  access_token: string;\n  expires_in: number;\n  mfa_address: string;\n  mfa_channel: 'SMS' | 'EMAIL';\n  mfa_id: string;\n  token_type: 'mfa' | 'bearer' | 'refresh';\n}\n",
            "properties": [
                {
                    "name": "access_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "expires_in",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "mfa_address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mfa_channel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"SMS\" | \"EMAIL\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "mfa_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "token_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"mfa\" | \"bearer\" | \"refresh\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IResLogin",
            "id": "interface-IResLogin-98fbedcf33cf19d4cabe8e9f5eeaa6fdeb615620a8c6609d334ecd4c609f4ee18045e566c430e643cf707b0ff1111a90b06531f94f82a18327132f7fee45c754-1",
            "file": "src/app/core/http/sign-in/sign-in.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IReqLogin {\n  username: string;\n  password: string;\n}\n\nexport interface IResLogin {\n  access_token: string;\n  expires_in: number;\n  mfa_address: string;\n  mfa_channel: 'SMS' | 'EMAIL';\n  mfa_id: string;\n  token_type: 'mfa' | 'bearer' | 'refresh';\n}\n",
            "properties": [
                {
                    "name": "access_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "expires_in",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "mfa_address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mfa_channel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"SMS\" | \"EMAIL\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "mfa_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "token_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"mfa\" | \"bearer\" | \"refresh\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IResLogin-1"
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-94ea7416d05620661a2923f6e6cc724e10f86fd7f40829a8440aad262012417c5e7a3ccc751787a08a31030adab0e53f470959028525740cf689df7a568ea761",
            "file": "src/app/shared/services/auth.service.ts",
            "properties": [
                {
                    "name": "appAccess",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "authorised",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAppAccess",
                    "defaultValue": "this.appAccess.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isAuthorised",
                    "defaultValue": "this.authorised.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "authCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "flush",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\nimport { systemConfig } from '@app/core/configs';\nimport { Permission } from '@app/core/enum';\n\nconst authServiceKey = systemConfig.authServiceKey || 'auth';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private authorised = signal(false);\n  private appAccess = signal(false);\n\n  readonly isAuthorised = this.authorised.asReadonly();\n  readonly isAppAccess = this.appAccess.asReadonly();\n\n  constructor() {}\n\n  authCheck() {\n    const authorisedUser = JSON.parse(\n      localStorage.getItem(authServiceKey) || '{}'\n    );\n    const isExpired =\n      authorisedUser.exp && authorisedUser.exp < Date.now() / 1000;\n\n    if (!isExpired || authorisedUser.exp) {\n      // this.permissionsService.addPermission(authorisedUser.roles);\n      return this.authorised.set(true);\n    }\n    this.authorised.set(false);\n  }\n\n  flush() {\n    this.authorised.set(false);\n    this.appAccess.set(false);\n    localStorage.removeItem(authServiceKey);\n    // this.permissionsService.flushPermissions();\n  }\n\n  set auth(data: any) {\n    const updatedAuthData = { ...this.auth, ...data };\n    localStorage.setItem(authServiceKey, JSON.stringify(updatedAuthData));\n    this.authCheck();\n  }\n\n  get auth() {\n    return JSON.parse(localStorage.getItem(authServiceKey) || '{}');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "accessors": {
                "auth": {
                    "name": "auth",
                    "setSignature": {
                        "name": "auth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "auth",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ClientTokenService",
            "id": "injectable-ClientTokenService-6c5507ffb78bda623cd0c77dd9f011ec5b683816f7ed6f41597c7c6ede504a0fffea3698e8aa80dee97ee2a40667bee9f194f5501baecd3db805b0f69c802ba3",
            "file": "src/app/shared/services/client-token.service.ts",
            "properties": [
                {
                    "name": "clientReference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tokenUrl",
                    "defaultValue": "'/x-api/api/oauth/token?grant_type=client_credentials'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clientToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createAuthHeader",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTokenValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClientTokenService {\n  private clientReference: any;\n  private readonly tokenUrl =\n    '/x-api/api/oauth/token?grant_type=client_credentials';\n\n  constructor(private http: HttpClient) {}\n\n  clientToken(): Observable<any> {\n    if (this.isTokenValid()) {\n      return of(this.clientReference).pipe(\n        map(() => this.createAuthHeader(this.clientReference.access_token))\n      );\n    }\n\n    return this.http.post<any>(this.tokenUrl, {}).pipe(\n      map((response) => {\n        const helper = new JwtHelperService();\n        const decodedToken = helper.decodeToken(response.access_token);\n        this.clientReference = response;\n        this.clientReference.exp = decodedToken.exp;\n        return this.createAuthHeader(this.clientReference.access_token);\n      })\n    );\n  }\n\n  private isTokenValid(): boolean {\n    return (\n      this.clientReference &&\n      this.clientReference.exp - Math.floor(Date.now() / 1000) > 0\n    );\n  }\n\n  private createAuthHeader(token: string): { Authorization: string } {\n    return {\n      Authorization: 'Bearer ' + token,\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ClipboardService",
            "id": "injectable-ClipboardService-f0979505225bf452002c3833e0915ca35503bb130867a0aec24ab0fd0b1926c1867c0d81679485cfd1a59484b501bdd4ab5e40eb51835a08d26386639ccb5947",
            "file": "src/app/core/utils/clipboard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "copyToClipboard",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "copyToClipboardFallback",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "notificationMsg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "notificationMsg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClipboardService {\n  constructor() {}\n\n  private copyToClipboardFallback(text: string, notificationMsg: string): void {\n    const textArea = document.createElement('textarea');\n    textArea.value = text;\n    document.body.appendChild(textArea);\n    textArea.select();\n    try {\n      document.execCommand('copy');\n      // this.notificationService.showNotification(\n      //   'Success',\n      //   notificationMsg,\n      //   'success'\n      // );\n    } catch (err) {\n      console.error('Fallback: Oops, unable to copy', err);\n      // this.notificationService.showNotification(\n      //   'Error',\n      //   'Failed to copy to clipboard.',\n      //   'error'\n      // );\n    }\n    document.body.removeChild(textArea);\n  }\n\n  async copyToClipboard(text: string, detail?: string): Promise<void> {\n    try {\n      const notificationMsg = detail\n        ? `${detail} copied to clipboard!`\n        : 'Text copied to clipboard!';\n\n      if (navigator.clipboard && navigator.clipboard.writeText) {\n        await navigator.clipboard.writeText(text);\n        // this.notificationService.showNotification(\n        //   'Success',\n        //   notificationMsg,\n        //   'success'\n        // );\n      } else {\n        this.copyToClipboardFallback(text, notificationMsg);\n      }\n    } catch (err) {\n      console.error('Failed to copy text: ', err);\n      // this.notificationService.showNotification(\n      //   'Error',\n      //   'Failed to copy to clipboard.',\n      //   'error'\n      // );\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RegisterRedirectService",
            "id": "injectable-RegisterRedirectService-cf572fc9f2ecc5fb15a49318b646e5c76e6b7615622f4e537069080f309a0f652f6956e37e72137a9248ab9f6fea60d918ffe0cf4f4a14098cd8ea8efc24d7e0",
            "file": "src/app/shared/services/register-redirect.service.ts",
            "properties": [
                {
                    "name": "registerStepUrl",
                    "defaultValue": "signal<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "registerStep",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal, effect } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegisterRedirectService {\n  private registerStepUrl = signal<string | null>(null);\n\n  constructor(private router: Router) {\n    effect(() => {\n      //   const url = this.redirectUrl();\n      //   if (url) {\n      //     this.router.navigate([url]);\n      //     this.redirectUrl.set(null);\n      //   }\n    });\n  }\n\n  // Method to trigger redirection\n  registerStep(data: any) {\n    const url = signal<string | null>(null);\n    switch (data.state) {\n      case 'WAITING_EMAIL_VERIFICATION':\n        this.router.navigate(['/register/verify-email', data.registration_id]);\n        return true;\n      case 'WAITING_PROFILE':\n        this.router.navigate(['/register/profile', data.registration_id]);\n        return true;\n      case 'WAITING_PHONE_NUMBER':\n      case 'WAITING_PHONE_NUMBER_VERIFICATION':\n      case 'PHONE_NUMBER_VERIFICATION_FAILED':\n      case 'PHONE_NUMBER_RECEIVED':\n      case 'PHONE_NUMBER_NOT_VALID':\n      case 'PHONE_NUMBER_ALREADY_EXISTS':\n      case 'VALIDATING_PHONE_NUMBER_VERIFICATION_CODE':\n        this.router.navigate(['/register/phone-number', data.registration_id]);\n        return true;\n      case 'WAITING_PASSWORD':\n        // it works with verification id and is not visible in any response\n        // so we dont need to navigate the active page\n        return true;\n      case 'REGISTRATION_COMPLETED\"':\n        this.router.navigate(['/login']);\n        return true;\n      case 'INITIALIZED':\n      case 'STARTED':\n      case 'CONSENT_REQUIRED':\n      case 'USER_ALREADY_EXISTS':\n        this.router.navigate(['/register']);\n        return true;\n      default:\n        return false;\n    }\n\n    this.router.navigate(['/register']);\n    this.registerStepUrl.set(data);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RegisterService",
            "id": "injectable-RegisterService-3bb61407f820228575556780441118d0b7eba89248a8367a472d050e0d29ce17a73d98c3a2d19de5c2342a8a4cfde92e1242ea39104eb944cff0c411a189c4a2",
            "file": "src/app/core/http/register/register.service.ts",
            "properties": [
                {
                    "name": "endpointUrl",
                    "defaultValue": "`x-api/api/v1/registration`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "signInheaders",
                    "defaultValue": "new HttpHeaders({\n    'Content-Type': 'application/x-www-form-urlencoded',\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "signInUrl",
                    "defaultValue": "'x-api/api/oauth/token'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "payload",
                            "type": "IReqLogin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResLogin>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "IReqLogin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyEmail",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, mergeMap, Observable } from 'rxjs';\nimport { IReqLogin, IResLogin } from '@core/http/register/register.interface';\nimport { ClientTokenService } from '@shared/services/client-token.service';\n\n@Injectable()\nexport class RegisterService {\n  private readonly signInUrl = 'x-api/api/oauth/token';\n  private readonly endpointUrl = `x-api/api/v1/registration`;\n\n  private readonly signInheaders = new HttpHeaders({\n    'Content-Type': 'application/x-www-form-urlencoded',\n  });\n\n  constructor(\n    private http: HttpClient,\n    private clientTokenService: ClientTokenService\n  ) {}\n\n  signIn(payload: IReqLogin): Observable<IResLogin> {\n    const params = new HttpParams({\n      fromObject: {\n        ...payload,\n        grant_type: 'password',\n      },\n    });\n\n    return this.http.post<IResLogin>(this.signInUrl, params.toString(), {\n      headers: this.signInheaders,\n    });\n  }\n\n  signUp(params: any): Observable<any> {\n    return this.clientTokenService\n      .clientToken()\n      .pipe(\n        mergeMap((authHeader) =>\n          this.http\n            .post<any>(this.endpointUrl, params, { headers: authHeader })\n            .pipe(map((response) => response))\n        )\n      );\n  }\n\n  verifyEmail(uuid: string): Observable<any> {\n    return this.clientTokenService.clientToken().pipe(\n      mergeMap((authHeader) => {\n        const url = `${this.endpointUrl}/verify-email?verificationId=${uuid}`;\n        return this.http.post<any>(url, {}, { headers: authHeader }).pipe(\n          map((response) => {\n            return response;\n          })\n        );\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "clientTokenService",
                        "type": "ClientTokenService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "clientTokenService",
                        "type": "ClientTokenService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SignInService",
            "id": "injectable-SignInService-d6bee6e4fc213067250969d6a748e4f4b093cbe30615c0dfe4af0917d3acae52e0a537a5c6f071822dc9dce33ce849608b0e25586d1d69427d7faf7a22b70867",
            "file": "src/app/core/http/sign-in/sign-in.service.ts",
            "properties": [
                {
                    "name": "headers",
                    "defaultValue": "new HttpHeaders({\n    'Content-Type': 'application/x-www-form-urlencoded',\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "url",
                    "defaultValue": "'x-api/api/oauth/token'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "payload",
                            "type": "IReqLogin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IResLogin>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "IReqLogin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IReqLogin, IResLogin } from '@core/http/register/register.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SignInService {\n  private readonly url = 'x-api/api/oauth/token';\n  private readonly headers = new HttpHeaders({\n    'Content-Type': 'application/x-www-form-urlencoded',\n  });\n\n  constructor(private http: HttpClient) {}\n\n  login(payload: IReqLogin): Observable<IResLogin> {\n    const params = new HttpParams({\n      fromObject: {\n        ...payload,\n        grant_type: 'password',\n      },\n    });\n\n    return this.http.post<IResLogin>(this.url, params.toString(), {\n      headers: this.headers,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StrongPasswordService",
            "id": "injectable-StrongPasswordService-c3b7eda2a54171f08bb6e611e990513b85101173068e0bff2b26ce61ab5c884c61bda47e130029bfb5d35400f16aaf3542fc794aa78ac5892efa01db43585d8c",
            "file": "src/app/core/utils/strong-password.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "generateStrongPassword",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "12"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "12",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StrongPasswordService {\n  generateStrongPassword(length: number = 12): string {\n    const upperCase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const lowerCase = 'abcdefghijklmnopqrstuvwxyz';\n    const numbers = '0123456789';\n    const specialChars = '!@#$%^&*()_+[]{}|;:,.<>?';\n    const allChars = upperCase + lowerCase + numbers + specialChars;\n\n    const getRandom = (chars: string) =>\n      chars[Math.floor(Math.random() * chars.length)];\n\n    let password =\n      getRandom(upperCase) +\n      getRandom(lowerCase) +\n      getRandom(numbers) +\n      getRandom(specialChars);\n\n    for (let i = password.length; i < length; i++) {\n      password += getRandom(allChars);\n    }\n\n    return password\n      .split('')\n      .sort(() => Math.random() - 0.5)\n      .join('');\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-a1e09a1d633675242efed526f6f61104addf00dab35942bea34a2eebdac639cf8525d94aedbd65cb7343413fbcc589c7aaefbaa8e6b10881eff6a154d3aff0d3",
            "file": "src/app/shared/services/theme.services.ts",
            "properties": [
                {
                    "name": "themeKey",
                    "defaultValue": "'app-theme'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "\"light\" | \"dark\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "\"light\" | \"dark\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  private themeKey = 'app-theme';\n\n  constructor() {\n    const theme =\n      localStorage.getItem(this.themeKey) === 'dark' ? 'dark' : 'light';\n    this.setTheme(theme);\n  }\n\n  setTheme(theme: 'light' | 'dark'): void {\n    document.documentElement.setAttribute('color-scheme', theme);\n    localStorage.setItem(this.themeKey, theme);\n  }\n\n  toggleTheme(): void {\n    const currentTheme = document.documentElement.getAttribute('color-scheme');\n    const newTheme = currentTheme === 'light' ? 'dark' : 'light';\n    this.setTheme(newTheme);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TransactionService",
            "id": "injectable-TransactionService-d938cdf9c2cbbfff1dd26173fe0c437273da3e2ef238271531d6a60b4d9a2a1311fcc0985ba813cddab399a26d3fd668c88049f43a4d549a9f0fab2092c90e8a",
            "file": "src/app/core/http/transaction/transaction.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-bef24bb4c35271eb0bfed0f41cdc82f8c3d9ebe2501181377c84364ff6b001ac8e870bc5822aca55be3a13c7ee7180dc8e71bcf8de4810297736e4edb77fa817",
            "file": "src/app/core/http/user/user.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ValidatorService",
            "id": "injectable-ValidatorService-abef6a36281067eb6fb6410a3b620b9f7e8fb8f102a003207fd46c92af6fc3ab72dd0bcf76015b2029cc703686b86c6661e201094244c2767f0175a049996382",
            "file": "src/app/core/utils/validators.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "alphabeticOnlyValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "bicValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "blockNumbers",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "blockSpecialChar",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "emailValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "notOnlyWhitespace",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "passwordValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AbstractControl, ValidatorFn, ValidationErrors } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ValidatorService {\n  constructor() {}\n\n  public blockSpecialChar(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const hasSpecialChar = /[^\\p{L}\\s]/gu.test(control.value);\n      return hasSpecialChar ? { specialChar: true } : null;\n    };\n  }\n\n  public emailValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const email = control.value;\n      const domainPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      const isValid = domainPattern.test(email);\n      return isValid ? null : { invalidEmailDomain: { value: control.value } };\n    };\n  }\n\n  public notOnlyWhitespace(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const isWhitespace = (control.value || '').trim().length === 0;\n      const isValid = !isWhitespace;\n      return isValid ? null : { whitespace: true };\n    };\n  }\n\n  public alphabeticOnlyValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const isValid = /^[a-zA-Z\\s]+$/.test(control.value);\n      return isValid ? null : { alphabeticOnly: { valid: false } };\n    };\n  }\n\n  public blockNumbers(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const hasNumber = /\\d/.test(control.value);\n      return hasNumber ? { hasNumber: true } : null;\n    };\n  }\n\n  public bicValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const _regex = /^[A-Z]{6}[A-Z0-9]{2}([A-Z0-9]{3})?$/;\n      const _result = _regex.test(control.value);\n      return _result ? null : { isBic: true };\n    };\n  }\n\n  public passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    const errors: ValidationErrors = {};\n\n    if (password.length < 8) {\n      errors['minLength'] = {\n        minLength: 8,\n        actualLength: password.length,\n      };\n    }\n\n    if (password.length > 50) {\n      errors['maxLength'] = {\n        maxLength: 50,\n        actualLength: password.length,\n      };\n    }\n\n    if (!/[A-Z]/.test(password)) {\n      errors['noUppercase'] = true;\n    }\n\n    if (!/[a-z]/.test(password)) {\n      errors['noLowercase'] = true;\n    }\n\n    if (!/[!@#$%^&*(),.?\":{}|<>\\+\\-]/.test(password)) {\n      errors['noSymbol'] = true;\n    }\n\n    if (!/\\d/.test(password)) {\n      errors['noDigit'] = true;\n    }\n\n    const patternDigitAndLetter = /^(?=.*[a-zA-Z])(?=.*\\d).+$/;\n    if (!patternDigitAndLetter.test(password)) {\n      errors['noDigitLetter'] = true;\n    }\n\n    return Object.keys(errors).length ? errors : null;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-347337d5cab88f9e3e77174d4c834110971a40b2e4b11e76511db4b944b3dd358490af8b075d7342c0ca2c0ce610499e41a0b27c23e1dc61b3d0d5735cbfe283",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css',\n  imports: [RouterOutlet],\n})\nexport class AppComponent {}\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<main class=\"main\">\n  <!-- <app-navigation></app-navigation> -->\n  <router-outlet />\n</main>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-941a09488a246c51de98f324b21afdaa06d887b66805716069566139a295f9ed0b480b54fb4c1e0c710fd708c9b5588cd1d5d764e12bf44dd270349347b36230",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "block",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"default\" | \"primary\" | \"secondary\" | \"danger\" | \"success\"",
                    "decorators": []
                },
                {
                    "name": "fontFace",
                    "defaultValue": "'Inter'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "\"Inter\" | \"Manrope\" | \"Nunito\" | \"Raleway\"",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "radius",
                    "defaultValue": "'0.375rem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "\"default\" | \"small\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n@Component({\n    selector: 'app-button',\n    imports: [CommonModule],\n    templateUrl: './button.component.html',\n    styleUrl: './button.component.css'\n})\nexport class ButtonComponent {\n  constructor() {}\n  @Input() isDisabled: boolean = false;\n  @Input() loading: boolean = true;\n  @Input() color: 'default' | 'primary' | 'secondary' | 'danger' | 'success' =\n    'default';\n  @Input() size: 'default' | 'small' | 'large' = 'default';\n  @Input() block: boolean = true;\n  @Input() label: string = 'Button';\n  @Input() radius: string = '0.375rem';\n  @Input() type: 'button' | 'submit' | 'reset' = 'button';\n  @Input() fontFace: 'Inter' | 'Manrope' | 'Nunito' | 'Raleway' = 'Inter';\n  @Output() onClick = new EventEmitter<any>();\n\n  handleClick(event: any) {\n    this.onClick.emit(event);\n  }\n}\n",
            "styleUrl": "./button.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": [],
            "templateData": "<button\n  [disabled]=\"isDisabled\"\n  [class.loading]=\"loading\"\n  [ngClass]=\"[size, color, block ? 'block' : '']\"\n  class=\"button\"\n  (click)=\"handleClick($event)\"\n>\n  @if (loading) {\n  <i class=\"button-loading\"></i>\n  } @else {\n  {{ label }}\n  }\n</button>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-3cb40d1d673adaf9ff06b797a0247ac8dca9e24172bd7e00901faf08363a2d7bc1079a106ab9f69518ce07eb5cc18d8c7fd8400260a0c861c61922743b886ff6",
            "file": "src/app/shared/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-checkbox',\n    imports: [],\n    templateUrl: './checkbox.component.html',\n    styleUrl: './checkbox.component.css'\n})\nexport class CheckboxComponent {\n\n}\n",
            "styleUrl": "./checkbox.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>checkbox works!</p>\n"
        },
        {
            "name": "ContainerComponent",
            "id": "component-ContainerComponent-a5796e35b6a6f10f4920e76ec31b36a8b16526b5b8589299bc871a264b311a539a86c80f7bcb5e5cb43a75fe8583a604f157a32aca2434f08f2b56733afb191a",
            "file": "src/app/shared/components/container/container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fullHeight",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mainElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "makeFullHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "revertFullHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Renderer2,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  HostBinding,\n} from '@angular/core';\n\n@Component({\n    selector: 'app-container',\n    imports: [],\n    templateUrl: './container.component.html',\n    styleUrl: './container.component.css'\n})\nexport class ContainerComponent {\n  private mainElement: HTMLElement | null;\n  @Input() fullHeight: boolean = false;\n\n  constructor(private renderer: Renderer2) {\n    this.mainElement = document.querySelector('main');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['fullHeight'] && changes['fullHeight'].currentValue) {\n      this.makeFullHeight();\n    } else if (changes['fullHeight'] && !changes['fullHeight'].currentValue) {\n      this.revertFullHeight();\n    }\n  }\n\n  private makeFullHeight() {\n    this.renderer.addClass(this.mainElement, 'full-height');\n  }\n\n  private revertFullHeight() {\n    this.renderer.removeClass(this.mainElement, 'full-height');\n  }\n}\n",
            "styleUrl": "./container.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container centered\" [class.full-height]=\"fullHeight\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "CreatePasswordComponent",
            "id": "component-CreatePasswordComponent-59bf45fd8a9bb0f0f4aa6b0fb435f33d4fb72861f1de9041ec752128d0d8494d0e89911ec4304cbbdda2b87769a4a57d196de31135e3b4f194a0de7abca372f8",
            "file": "src/app/public/register/create-password/create-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "RegisterService",
                    "type": "injectable"
                },
                {
                    "name": "ValidatorService",
                    "type": "injectable"
                }
            ],
            "selector": "app-create-password",
            "styleUrls": [
                "./create-password.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./create-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "uuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "verifyEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ContainerComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "PasswordValidationComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RegisterService } from '@core/http';\nimport { ValidatorService } from '@core/utils';\nimport { finalize } from 'rxjs/operators';\nimport {\n  InputComponent,\n  ContainerComponent,\n  ButtonComponent,\n  PasswordValidationComponent,\n} from '@shared/components';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\n@Component({\n    selector: 'app-create-password',\n    templateUrl: './create-password.component.html',\n    styleUrls: ['./create-password.component.css'],\n    providers: [RegisterService, ValidatorService],\n    imports: [\n        ContainerComponent,\n        InputComponent,\n        ButtonComponent,\n        PasswordValidationComponent,\n        ReactiveFormsModule,\n    ]\n})\nexport class CreatePasswordComponent implements OnInit {\n  form: FormGroup;\n  uuid?: string;\n  loading = false;\n\n  constructor(\n    private registerService: RegisterService,\n    private route: ActivatedRoute,\n    private fb: FormBuilder,\n    private validatorService: ValidatorService\n  ) {\n    this.form = this.createForm();\n  }\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params) => {\n      this.uuid = params['uuid'];\n      if (this.uuid) {\n        this.verifyEmail();\n      }\n    });\n  }\n\n  private createForm(): FormGroup {\n    return this.fb.group({\n      password: [\n        '',\n        [Validators.required, this.validatorService.passwordValidator],\n      ],\n    });\n  }\n\n  private verifyEmail(): void {\n    this.loading = true;\n    this.registerService\n      .verifyEmail(this.uuid!)\n      .pipe(finalize(() => (this.loading = false)))\n      .subscribe();\n  }\n\n  onSubmit(): void {\n    // Add your submit logic here\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n}\nimg {\n  width: auto;\n  height: 50px;\n  object-fit: cover;\n}\n",
                    "styleUrl": "./create-password.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "registerService",
                        "type": "RegisterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validatorService",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "registerService",
                        "type": "RegisterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validatorService",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-container [fullHeight]=\"true\">\n  <img src=\"assets/images/brand/brand-logo.svg\" />\n\n  <h1 class=\"primary mb-3\">\n    {{ \"Create Password\" }}\n  </h1>\n  <p>\n    {{ \"Please set a strong password.\" }}\n  </p>\n\n  <form class=\"form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <app-input\n      [formControlName]=\"'password'\"\n      [control]=\"form.get('password')\"\n      [type]=\"'password'\"\n      [name]=\"'password'\"\n      [label]=\"'Your password'\"\n      [isDisabled]=\"loading\"\n      icon=\"eye\"\n    ></app-input>\n\n    <app-password-validation\n      [control]=\"form.get('password')\"\n    ></app-password-validation>\n\n    <app-button\n      [isDisabled]=\"form.invalid\"\n      [loading]=\"loading\"\n      [label]=\"'Create Password'\"\n      color=\"secondary\"\n    ></app-button>\n  </form>\n</app-container>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-7ac3b817eb1200188c8e46e0950b4411b7544a9f8f673962a35d2319498059a7f6c25c2e0e35d6d247e9b82dd5bef46af5827d0b1956441a56251cf9e7be5726",
            "file": "src/app/shared/components/layouts/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  imports: [],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.css',\n})\nexport class FooterComponent {}\n",
            "styleUrl": "./footer.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>footer works!</p>\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-935e2bb719a7b4001d89ef59058ff2a2dc0657fe7d74189d9c1365216c03ba9699939497375fe0fdc5cc832de138253ebeb9f7ff3253fec2942b46a472cd0094",
            "file": "src/app/shared/components/form/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-form',\n    imports: [],\n    templateUrl: './form.component.html',\n    styleUrl: './form.component.css'\n})\nexport class FormComponent {}\n",
            "styleUrl": "./form.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-ddd5e6d02f106c6c263c72639f801bb220f00aa59c38466a60620cd014cfa9279262df0edc37438b27b1ab9dd7a5817ec7d438cda56bd7b12efd00ad7cc5f6f4",
            "file": "src/app/shared/components/inputs/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "endIcon",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "\"email\" | \"text\" | \"number\" | \"password\"",
                    "decorators": []
                },
                {
                    "name": "uppercase",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isPasswordVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n    selector: 'app-input',\n    imports: [CommonModule],\n    templateUrl: './input.component.html',\n    styleUrl: './input.component.css',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => InputComponent),\n            multi: true,\n        },\n    ]\n})\nexport class InputComponent implements ControlValueAccessor {\n  @Input() type: 'email' | 'text' | 'number' | 'password' = 'text';\n  @Input() name: string = '';\n  @Input() label?: string = undefined;\n  @Input() placeholder?: string = undefined;\n  @Input() autocomplete: string = 'off';\n  @Input() required: boolean = false;\n  @Input() isDisabled: boolean = false;\n  @Input() control: any;\n  @Input() uppercase: boolean = false;\n  @Input() endIcon?: string = undefined;\n\n  value: any;\n  isPasswordVisible = false;\n  // isDisabled: boolean = false;\n\n  private onChange = (value: any) => {};\n\n  private onTouched = () => {};\n\n  public writeValue(value: any): void {\n    this.value = value;\n  }\n\n  public registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  public registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  onInputChange(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    this.value = this.uppercase ? target.value.toUpperCase() : target.value;\n\n    this.onChange(this.value);\n    this.onTouched();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  togglePasswordVisibility(): void {\n    this.isPasswordVisible = !this.isPasswordVisible;\n    // this.type = this.isPasswordVisible ? 'text' : 'password';\n  }\n}\n",
            "styleUrl": "./input.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"input-group\">\n  <label for=\"{{ name }}\">\n    {{ label || name }}\n    @if (required) {\n    <span>*</span>\n    }\n  </label>\n  <div class=\"input-container\">\n    <input\n      [id]=\"name\"\n      [name]=\"name\"\n      [type]=\"isPasswordVisible ? 'text' : type\"\n      [autocomplete]=\"autocomplete\"\n      [required]=\"required\"\n      (input)=\"onInputChange($event)\"\n      placeholder=\"{{ placeholder }}\"\n      [disabled]=\"isDisabled\"\n      [class.invalid]=\"control?.invalid && control?.touched\"\n    />\n    @if (type==='password') {\n    <button\n      *ngIf=\"type === 'password'\"\n      (click)=\"togglePasswordVisibility()\"\n      class=\"toggle\"\n      aria-label=\"Toggle password visibility\"\n      type=\"button\"\n    >\n      <img\n        [src]=\"\n          isPasswordVisible\n            ? 'assets/icons/eye-on.svg'\n            : 'assets/icons/eye-off.svg'\n        \"\n        alt=\"Toggle icon\"\n      />\n    </button>\n    }\n  </div>\n  <div class=\"feedback\">\n    @if (control?.invalid && !control?.untouched) {\n    @if(control?.hasError('required')) {\n    <span class=\"danger\">\n      {{ \"Please fill this field.\" }}\n    </span>\n    } @else if (control?.hasError('email')) {\n    <span class=\"danger\">\n      {{ \"Please enter a valid email address.\" }}\n    </span>\n    } @else if (control?.hasError('hasNumber')) {\n    <span class=\"danger\">\n      {{ \"Numeric character is not allowed. \" }}\n    </span>\n    } }\n  </div>\n</div>\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-102e2f2a34d78c9db2309da6d600a10935cd938207a28a31b25a13abd4a10af76ffa125b9b93387e251761615870b11cbe8745881ebe8d23e02944eb81c17c1a",
            "file": "src/app/shared/components/layouts/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "toggleTheme",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "SwitchComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ThemeService } from '@shared/services';\nimport { SwitchComponent } from '@shared/components';\n\n@Component({\n    selector: 'app-navigation',\n    imports: [SwitchComponent],\n    templateUrl: './navigation.component.html',\n    styleUrl: './navigation.component.css'\n})\nexport class NavigationComponent {\n  constructor(private themeService: ThemeService) {}\n  toggleTheme(e: any): void {\n    this.themeService.toggleTheme();\n  }\n}\n",
            "styleUrl": "./navigation.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div>\n  <app-switch [checked]=\"true\" (toggled)=\"toggleTheme($event)\"></app-switch>\n</div>\n"
        },
        {
            "name": "OtpComponent",
            "id": "component-OtpComponent-0842f9156a7c1a07e6efc677df529b8f3f1b0a941b4fa842be0bbe7109f6fb233f09dbc85beddb3db848049c7f4ee23ea5e1742e94d5c51bc6bf28431942888d",
            "file": "src/app/public/otp/otp.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "RegisterService",
                    "type": "injectable"
                }
            ],
            "selector": "app-otp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./otp.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "onSubmit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "registerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegisterService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ContainerComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "PinInputComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthService } from '@shared/services';\nimport { RegisterService } from '@core/http';\nimport {\n  ButtonComponent,\n  PinInputComponent,\n  ContainerComponent,\n} from '@shared/components';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\n\n@Component({\n    selector: 'app-otp',\n    templateUrl: './otp.component.html',\n    styleUrl: './otp.component.css',\n    providers: [RegisterService],\n    imports: [\n        ReactiveFormsModule,\n        ContainerComponent,\n        ButtonComponent,\n        PinInputComponent,\n    ]\n})\nexport class OtpComponent {\n  form: FormGroup;\n  loading: boolean = false;\n  constructor(\n    public authService: AuthService,\n    public registerService: RegisterService,\n    public route: ActivatedRoute,\n    private formBuilder: FormBuilder\n  ) {\n    this.form = this.formBuilder.group({\n      mfa_channel: new FormControl('', [Validators.required, Validators.email]),\n      mfa_id: new FormControl('', [Validators.required]),\n      mfa_code: new FormControl('', [Validators.required]),\n    });\n    this.route.queryParams.subscribe((params) => {\n      this.form.patchValue({\n        mfa_id: params['mfa_id'],\n        mfa_channel: params['mfa_channel'],\n      });\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit = () => {};\n}\n",
            "styleUrl": "./otp.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "registerService",
                        "type": "RegisterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "registerService",
                        "type": "RegisterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-container [fullHeight]=\"true\">\n  <div style=\"display: grid; place-content: center\">\n    <h2>\n      {{ \"Authenticate Your Account\" }}\n    </h2>\n    <p>\n      Protecting your account is our top priority. Please confirm your account\n      by entering the authorisation code sent to\n    </p>\n    <span>+44*******432</span>\n    <form class=\"form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <app-pin-input [formControlName]=\"'mfa_code'\"></app-pin-input>\n      <app-button [loading]=\"false\">{{ \"Verify\" }}</app-button>\n    </form>\n  </div>\n</app-container>\n"
        },
        {
            "name": "PasswordValidationComponent",
            "id": "component-PasswordValidationComponent-f8667f555dc4993e8a431eed678721d37fa345b394dd95e1bf6cad2e9fbda621247c86f32ed3fc7cddaa25bf45a9c0336df1391db2d51a7de9bc6954132749ec",
            "file": "src/app/shared/components/password-validation/password-validation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-password-validation",
            "styleUrls": [
                "./password-validation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./password-validation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "control",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "AbstractControl | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'app-password-validation',\n    templateUrl: './password-validation.component.html',\n    styleUrls: ['./password-validation.component.css'],\n    imports: [CommonModule]\n})\nexport class PasswordValidationComponent {\n  @Input() control: AbstractControl | null = null;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n}\n\nul {\n}\nul li {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  position: relative;\n  padding-left: 1.5rem;\n  margin-top: 0.5rem;\n  font-size: 0.875rem;\n  color: #667180;\n}\n\nul li::before {\n  content: \"\";\n  font-size: 0.75rem;\n  width: 1em;\n  height: 1em;\n  position: absolute;\n  left: 0;\n  margin-top: 4px;\n  background-color: #d8d8d8;\n  border-radius: 100%;\n}\n\nul li.valid::before {\n  content: \"\";\n  background-color: #34d183;\n}\n",
                    "styleUrl": "./password-validation.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\n  <h4>\n    {{ \"To make your password more secure\" }}\n  </h4>\n  <ul>\n    <li\n      [class.valid]=\"\n        control &&\n        !control.hasError('minLength') &&\n        !control.hasError('maxLength')\n      \"\n    >\n      {{ \"8 to 50 characters\" }}\n    </li>\n    <li [class.valid]=\"control && !control.hasError('noDigitLetter')\">\n      {{ \"Use letters and numbers\" }}\n    </li>\n    <li\n      [class.valid]=\"\n        control &&\n        !control.hasError('noLowercase') &&\n        !control.hasError('noUppercase')\n      \"\n    >\n      {{ \"Mix lower and uppercase\" }}\n    </li>\n    <li [class.valid]=\"control && !control.hasError('noSymbol')\">\n      {{ \"Use special characters (e.g., @)\" }}\n    </li>\n  </ul>\n</div>\n"
        },
        {
            "name": "PinInputComponent",
            "id": "component-PinInputComponent-d39e779232b1f7d76b404865ce0bad5633c72df2e6dda2124cd242f2dd2cf4a78d48b015fac2a6db3da46cc8b936e291dd83758088b2e95f3c7627d4f90a68a8",
            "file": "src/app/shared/components/inputs/pin-input/pin-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PinInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-pin-input",
            "styleUrls": [
                "./pin-input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./pin-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isReset",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "digitChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "inputs",
                    "defaultValue": "new QueryList()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'inputs'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [
                        {
                            "name": "event",
                            "type": "ClipboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ClipboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Output,\n  forwardRef,\n  ViewChildren,\n  QueryList,\n  ElementRef,\n  Input,\n  SimpleChanges,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'app-pin-input',\n  templateUrl: './pin-input.component.html',\n  styleUrls: ['./pin-input.component.css'],\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => PinInputComponent),\n      multi: true,\n    },\n  ],\n})\nexport class PinInputComponent implements ControlValueAccessor {\n  @Input() label: string = '';\n  @Input() isReset: boolean = false;\n  @Output() digitChange = new EventEmitter<string>();\n  @ViewChildren('inputs') inputs: QueryList<ElementRef> = new QueryList();\n\n  value: string = '';\n  disabled: boolean = false;\n\n  onChange = (value: string) => {};\n  onTouched = () => {};\n\n  writeValue(value: string): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  onInput(event: any, index: number): void {\n    const input = event.target;\n    const value = input.value;\n\n    if (value && /^\\d$/.test(value)) {\n      if (index < 5) {\n        this.inputs.toArray()[index + 1].nativeElement.focus();\n      }\n      this.value = this.value + value;\n      this.onChange(this.value);\n      this.digitChange.emit(this.value);\n    } else {\n      input.value = '';\n    }\n  }\n\n  onKeydown(event: KeyboardEvent, index: number): void {\n    if (event.key === 'Backspace') {\n      const inputElements = this.inputs.toArray();\n      const currentInput = inputElements[index].nativeElement;\n\n      currentInput.value = '';\n      this.value = this.value.slice(0, index) + this.value.slice(index + 1);\n      this.onChange(this.value);\n      this.digitChange.emit(this.value);\n\n      if (index > 0 && currentInput.value === '') {\n        const previousInput = inputElements[index - 1].nativeElement;\n        previousInput.focus();\n        previousInput.value = '';\n        this.value = this.value.slice(0, index - 1) + this.value.slice(index);\n        this.onChange(this.value);\n        this.digitChange.emit(this.value);\n      }\n\n      event.preventDefault();\n    }\n  }\n\n  onPaste(event: ClipboardEvent): void {\n    const clipboardData = event.clipboardData || (window as any).clipboardData;\n    const pastedText = clipboardData.getData('text');\n\n    if (/^\\d{6}$/.test(pastedText)) {\n      this.value = pastedText;\n      this.onChange(this.value);\n      this.digitChange.emit(this.value);\n      const inputElements = this.inputs.toArray();\n      for (let i = 0; i < 6; i++) {\n        inputElements[i].nativeElement.value = pastedText[i];\n      }\n      if (inputElements[5]) {\n        inputElements[5].nativeElement.focus();\n      }\n      event.preventDefault();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['isReset'] && changes['isReset'].currentValue === true) {\n      this.inputs.forEach((el: ElementRef) => {\n        el.nativeElement.value = '';\n      });\n      this.inputs.toArray()[0].nativeElement.focus();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  justify-content: center;\n  margin: 1rem;\n  display: flex;\n  gap: 1rem;\n}\n\ninput {\n  width: 2.625rem;\n  height: 2.625rem;\n  line-height: 2.625rem;\n  font-size: 1.5rem;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  box-sizing: border-box;\n  text-align: center;\n  padding: 0;\n  border-radius: 8px;\n  border-style: solid;\n  border-width: 1px;\n  background-color: var(--surface-4);\n  border: 1px solid #86868b;\n}\n",
                    "styleUrl": "./pin-input.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"container\">\n  <input\n    #inputs\n    type=\"text\"\n    maxlength=\"1\"\n    pattern=\"\\d\"\n    (input)=\"onInput($event, 0)\"\n    (keydown)=\"onKeydown($event, 0)\"\n    (paste)=\"onPaste($event)\"\n    autofocus\n    inputmode=\"numeric\"\n  />\n  <input\n    #inputs\n    type=\"text\"\n    maxlength=\"1\"\n    pattern=\"\\d\"\n    (input)=\"onInput($event, 1)\"\n    (keydown)=\"onKeydown($event, 1)\"\n    inputmode=\"numeric\"\n  />\n  <input\n    #inputs\n    type=\"text\"\n    maxlength=\"1\"\n    pattern=\"\\d\"\n    (input)=\"onInput($event, 2)\"\n    (keydown)=\"onKeydown($event, 2)\"\n    inputmode=\"numeric\"\n  />\n  <input\n    #inputs\n    type=\"text\"\n    maxlength=\"1\"\n    pattern=\"\\d\"\n    (input)=\"onInput($event, 3)\"\n    (keydown)=\"onKeydown($event, 3)\"\n    inputmode=\"numeric\"\n  />\n  <input\n    #inputs\n    type=\"text\"\n    maxlength=\"1\"\n    pattern=\"\\d\"\n    (input)=\"onInput($event, 4)\"\n    (keydown)=\"onKeydown($event, 4)\"\n    inputmode=\"numeric\"\n  />\n  <input\n    #inputs\n    type=\"text\"\n    maxlength=\"1\"\n    pattern=\"\\d\"\n    (input)=\"onInput($event, 5)\"\n    (keydown)=\"onKeydown($event, 5)\"\n    inputmode=\"numeric\"\n  />\n  <div class=\"inputs\"></div>\n</div>\n"
        },
        {
            "name": "RadioComponent",
            "id": "component-RadioComponent-39c1f43545a0f3c0a79ef7cb49c659ed252454f0711b9362c4872617eebe7745c318e8f8adeb9bb42b786266b4fee9a4641aaa9013ad644f512cfcdc221bae06",
            "file": "src/app/shared/components/radio/radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-radio",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./radio.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-radio',\n    imports: [],\n    templateUrl: './radio.component.html',\n    styleUrl: './radio.component.css'\n})\nexport class RadioComponent {\n\n}\n",
            "styleUrl": "./radio.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>radio works!</p>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-f17f7da2d12fff39a03623cecfd0fe116d5223741951efc615226acf85bdeb5a193187f6503e5041d22905743c6f9bf1cfe8ee003bdcf5ea42f8fa23bafd3bcf",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": " | ",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'app-select',\n    imports: [],\n    templateUrl: './select.component.html',\n    styleUrl: './select.component.css'\n})\nexport class SelectComponent {\n  @Input() disabled = false;\n  @Input() name: string = '';\n  @Input() list: any[] = [];\n  @Input() loading: true | false = false;\n\n  onChange = () => {};\n  onTouched = () => {};\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  writeValue(value: any): void {\n    this.name = value;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}\n",
            "styleUrl": "./select.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>select works!</p>\n"
        },
        {
            "name": "SideBarComponent",
            "id": "component-SideBarComponent-6db5c55d13c779f357b0654a7309ee732305b06a5ddc429233ce53560ba5f224736935c0aab0bdb9ddc2e206d7eb3e820b4711a8bb5e6543f23ac2d2386a3a0f",
            "file": "src/app/shared/components/layouts/side-bar/side-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-side-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./side-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-side-bar',\n    imports: [],\n    templateUrl: './side-bar.component.html',\n    styleUrl: './side-bar.component.css'\n})\nexport class SideBarComponent {\n\n}\n",
            "styleUrl": "./side-bar.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>side-bar works!</p>\n"
        },
        {
            "name": "SignInComponent",
            "id": "component-SignInComponent-1097e63bc4b5abd17e230b4b355cef80a55c0f0312a7087a6d497d1a516328d31fb0e7dc943bfd7201d11f28c9f0c347c2ed3879f18ed7e2af08462ad275437f",
            "file": "src/app/public/sign-in/sign-in.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "RegisterService",
                    "type": "injectable"
                }
            ],
            "selector": "app-sign-in",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sign-in.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "onSubmit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "registerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegisterService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ContainerComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, effect, QueryList } from '@angular/core';\nimport { RouterModule, Router } from '@angular/router';\nimport { AuthService } from '@shared/services/auth.service';\nimport { RegisterService } from '@core/http/register/register.service';\nimport {\n  InputComponent,\n  ContainerComponent,\n  ButtonComponent,\n} from '@shared/components';\n\nimport {\n  FormGroup,\n  FormControl,\n  Validators,\n  ReactiveFormsModule,\n  FormBuilder,\n} from '@angular/forms';\nimport { finalize } from 'rxjs';\n\n@Component({\n    selector: 'app-sign-in',\n    templateUrl: './sign-in.component.html',\n    styleUrl: './sign-in.component.css',\n    providers: [RegisterService],\n    imports: [\n        RouterModule,\n        ReactiveFormsModule,\n        InputComponent,\n        ContainerComponent,\n        ButtonComponent,\n    ]\n})\nexport class SignInComponent {\n  form: FormGroup;\n  loading: boolean = false;\n  constructor(\n    private formBuilder: FormBuilder,\n    public authService: AuthService,\n    public registerService: RegisterService,\n    private router: Router\n  ) {\n    effect(() => {\n      console.log(`IsAuthorised: ${this.authService.isAuthorised}`);\n    });\n    this.form = this.formBuilder.group({\n      username: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required]),\n    });\n  }\n\n  onSubmit = () => {\n    this.loading = true;\n    this.registerService\n      .signIn(this.form.value)\n      .pipe(finalize(() => (this.loading = false)))\n      .subscribe((res) => {\n        this.router.navigate(['/otp'], {\n          queryParams: {\n            mfa_id: res.mfa_id,\n            expires_in: res.expires_in,\n            token_type: res.token_type,\n            mfa_channel: res.mfa_channel ?? 'SMS',\n            mfa_address: res.mfa_address,\n          },\n        });\n      });\n  };\n  get f() {\n    return this.form.controls;\n  }\n}\n",
            "styleUrl": "./sign-in.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "registerService",
                        "type": "RegisterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "registerService",
                        "type": "RegisterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 68
                    }
                }
            },
            "templateData": "<app-container [fullHeight]=\"true\">\n  <div style=\"display: grid; place-content: center\">\n    <h1 class=\"primary mb-3\">\n      {{ \"Financial House Business\" }}\n    </h1>\n    <p>\n      {{\n        \"Welcome back! Please enter your credentials to access your account.\"\n      }}\n    </p>\n    <form class=\"form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <app-input\n        [formControlName]=\"'username'\"\n        [control]=\"form.get('username')\"\n        [type]=\"'email'\"\n        [name]=\"'username'\"\n        [label]=\"'Your email address'\"\n        [isDisabled]=\"loading\"\n        class=\"mb-4\"\n      ></app-input>\n      <app-input\n        [formControlName]=\"'password'\"\n        [control]=\"form.get('password')\"\n        [type]=\"'password'\"\n        [name]=\"'password'\"\n        [label]=\"'Your password'\"\n        [isDisabled]=\"loading\"\n        icon=\"eye\"\n      ></app-input>\n\n      <app-button\n        [isDisabled]=\"form.invalid\"\n        [loading]=\"loading\"\n        [label]=\"'Sign In'\"\n        color=\"secondary\"\n      ></app-button>\n    </form>\n\n    <div class=\"register\">\n      <span\n        >{{ \"Don’t have an account?\" }} &nbsp;\n        <a href=\"\" [routerLink]=\"['/sign-up']\">{{ \"Signup here.\" }}</a></span\n      >\n    </div>\n  </div>\n</app-container>\n"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-c535bccb816416e99c9ab39787180dce85d2cb348c37dea05a1c39319d1fad4d138758b87bc61fd35226e5a9370664b02813c68297f8e97976a210b03d9407d0",
            "file": "src/app/public/register/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "RegisterService",
                    "type": "injectable"
                }
            ],
            "selector": "app-sign-up",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "onSubmit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "registerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegisterService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ContainerComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, effect } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthService } from '@shared/services/auth.service';\nimport { RegisterService } from '@core/http/register/register.service';\nimport {\n  InputComponent,\n  ContainerComponent,\n  ButtonComponent,\n} from '@shared/components';\n\nimport {\n  FormGroup,\n  Validators,\n  ReactiveFormsModule,\n  FormBuilder,\n} from '@angular/forms';\nimport { finalize } from 'rxjs';\n\n@Component({\n    selector: 'app-sign-up',\n    templateUrl: './sign-up.component.html',\n    styleUrl: './sign-up.component.css',\n    providers: [RegisterService],\n    imports: [\n        RouterModule,\n        ReactiveFormsModule,\n        InputComponent,\n        ContainerComponent,\n        ButtonComponent,\n    ]\n})\nexport class SignUpComponent {\n  form: FormGroup;\n  loading: boolean = false;\n  constructor(\n    private formBuilder: FormBuilder,\n    public authService: AuthService,\n    public registerService: RegisterService\n  ) {\n    effect(() => {\n      console.log(`IsAuthorised: ${this.authService.isAuthorised}`);\n    });\n    this.form = this.formBuilder.group({\n      email: this.formBuilder.control('', [Validators.required]),\n    });\n  }\n\n  onSubmit = () => {\n    this.loading = true;\n    const payload = {\n      ...{\n        email_address: this.form.value.email,\n        client_current_time: new Date().toISOString(),\n        consent: true,\n        locale: 'en',\n      },\n    };\n\n    this.registerService\n      .signUp(payload)\n      .pipe(finalize(() => (this.loading = false)))\n      .subscribe((res) => {});\n  };\n\n  get f() {\n    return this.form.controls;\n  }\n}\n",
            "styleUrl": "./sign-up.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "registerService",
                        "type": "RegisterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "registerService",
                        "type": "RegisterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                }
            },
            "templateData": "<app-container [fullHeight]=\"true\">\n  <div style=\"display: grid; place-content: center\">\n    <h1 class=\"primary mb-3\">\n      {{ \"Register Financial House Business\" }}\n    </h1>\n    <p>\n      {{ \"Single registration for all Financial House Business products.\" }}\n    </p>\n    <form class=\"form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <app-input\n        [formControlName]=\"'email'\"\n        [control]=\"form.get('email')\"\n        [type]=\"'email'\"\n        [name]=\"'email'\"\n        [label]=\"'Your email address'\"\n        [isDisabled]=\"loading\"\n        class=\"mb-4\"\n      ></app-input>\n      <app-button\n        [isDisabled]=\"form.invalid\"\n        [loading]=\"loading\"\n        color=\"secondary\"\n        [label]=\"'Sign Up'\"\n        >{{ \"Sign Up\" }}</app-button\n      >\n    </form>\n\n    <div class=\"register\">\n      <span\n        >{{ \"Have an account?\" }} &nbsp;\n        <a [routerLink]=\"['/sign-in']\">{{ \"Sign in here.\" }}</a></span\n      >\n    </div>\n  </div>\n</app-container>\n"
        },
        {
            "name": "SwitchComponent",
            "id": "component-SwitchComponent-0a54993393b167e79fea8664168b450354dfc1b89542491d184090492324140a60966466c0ebe141e4aaec8c2eae14ee577c6e3d5cf4d0db51eaefaf4dab138f",
            "file": "src/app/shared/components/switch/switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-switch",
            "styleUrls": [
                "./switch.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./switch.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "toggled",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "toggleSwitch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-switch',\n  standalone: true,\n  templateUrl: './switch.component.html',\n  styleUrls: ['./switch.component.css'],\n})\nexport class SwitchComponent {\n  @Input() checked: boolean = false;\n  @Output() toggled = new EventEmitter<boolean>();\n\n  toggleSwitch(): void {\n    this.checked = !this.checked;\n    this.toggled.emit(this.checked);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".switch {\n  width: 50px;\n  height: 25px;\n  background-color: var(--surface-1-color, red);\n  border-radius: 25px;\n  position: relative;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &.active {\n    background-color: var(--surface-1-color, #6200ea);\n  }\n\n  .switch-knob {\n    width: 23px;\n    height: 23px;\n    background-color: #fff;\n    border-radius: 50%;\n    position: absolute;\n    top: 1px;\n    left: 1px;\n    transition: transform 0.3s ease;\n\n    .switch.active & {\n      transform: translateX(25px);\n    }\n  }\n}\n",
                    "styleUrl": "./switch.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"switch\" [class.active]=\"checked\" (click)=\"toggleSwitch()\">\n  <div class=\"switch-knob\"></div>\n</div>\n"
        },
        {
            "name": "VerifyEmailComponent",
            "id": "component-VerifyEmailComponent-6e720b186c05e4768146fbfd2a69a035e06d0ffee597cfcf744bf585f24deb380910ee41a5134007c66bc19d89d1faa7da16d2e2e3662cb133ce354538cfe12f",
            "file": "src/app/public/register/verify-email/verify-email.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-verify-email",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./verify-email.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "ContainerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ContainerComponent } from '@shared/components';\n\n@Component({\n    selector: 'app-verify-email',\n    templateUrl: './verify-email.component.html',\n    styleUrl: './verify-email.component.css',\n    imports: [RouterModule, ContainerComponent]\n})\nexport class VerifyEmailComponent {\n  constructor() {}\n}\n",
            "styleUrl": "./verify-email.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "extends": [],
            "templateData": "<app-container [fullHeight]=\"true\">\n  <img src=\"assets/images/brand/brand-logo.svg\" />\n  <div style=\"display: grid; place-content: center\">\n    <h1 class=\"primary mb-3\">\n      {{ \"E-Mail Confirmation\" }}\n    </h1>\n    <p>\n      {{\n        \"Click on the link that has been sent to ugur.c+21@freelancer.run confirm the address.\"\n      }}\n    </p>\n  </div>\n</app-container>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideRouter(routes),\n    provideHttpClient(withInterceptors([authInterceptor])),\n    BsModalService,\n  ],\n}"
            },
            {
                "name": "authInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\n  const excludedUrls: string[] = [];\n\n  if (!excludedUrls.includes(req.url)) {\n    const headers = {\n      'Client-Date': new Date().getTime().toString(),\n    };\n\n    console.log('AuthInterceptor', headers);\n    req = req.clone({ setHeaders: headers });\n  }\n\n  return next(req);\n}"
            },
            {
                "name": "authServiceKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/auth.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "systemConfig.authServiceKey || 'auth'"
            },
            {
                "name": "Countries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/countries.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'Afghanistan',\n    flag: '🇦🇫',\n    code: 'AF',\n    dial_code: '+93',\n    languages: {\n      en: 'Afghanistan',\n      tr: 'Afganistan',\n    },\n  },\n  {\n    name: 'Åland Islands',\n    flag: '🇦🇽',\n    code: 'AX',\n    dial_code: '+358',\n    languages: {\n      en: 'Åland Islands',\n      tr: 'Åland Adaları',\n    },\n  },\n  {\n    name: 'Albania',\n    flag: '🇦🇱',\n    code: 'AL',\n    dial_code: '+355',\n    languages: {\n      en: 'Albania',\n      tr: 'Arnavutluk',\n    },\n  },\n  {\n    name: 'Algeria',\n    flag: '🇩🇿',\n    code: 'DZ',\n    dial_code: '+213',\n    languages: {\n      en: 'Algeria',\n      tr: 'Cezayir',\n    },\n  },\n  {\n    name: 'American Samoa',\n    flag: '🇦🇸',\n    code: 'AS',\n    dial_code: '+1684',\n    languages: {\n      en: 'American Samoa',\n      tr: 'Amerikan Samoası',\n    },\n  },\n  {\n    name: 'Andorra',\n    flag: '🇦🇩',\n    code: 'AD',\n    dial_code: '+376',\n    languages: {\n      en: 'Andorra',\n      tr: 'Andorra',\n    },\n  },\n  {\n    name: 'Angola',\n    flag: '🇦🇴',\n    code: 'AO',\n    dial_code: '+244',\n    languages: {\n      en: 'Angola',\n      tr: 'Angola',\n    },\n  },\n  {\n    name: 'Anguilla',\n    flag: '🇦🇮',\n    code: 'AI',\n    dial_code: '+1264',\n    languages: {\n      en: 'Anguilla',\n      tr: 'Anguilla',\n    },\n  },\n  {\n    name: 'Antarctica',\n    flag: '🇦🇶',\n    code: 'AQ',\n    dial_code: '+672',\n    languages: {\n      en: 'Antarctica',\n      tr: 'Antarktika',\n    },\n  },\n  {\n    name: 'Antigua and Barbuda',\n    flag: '🇦🇬',\n    code: 'AG',\n    dial_code: '+1268',\n    languages: {\n      en: 'Antigua and Barbuda',\n      tr: 'Antigua ve Barbuda',\n    },\n  },\n  {\n    name: 'Argentina',\n    flag: '🇦🇷',\n    code: 'AR',\n    dial_code: '+54',\n    languages: {\n      en: 'Argentina',\n      tr: 'Arjantin',\n    },\n  },\n  {\n    name: 'Armenia',\n    flag: '🇦🇲',\n    code: 'AM',\n    dial_code: '+374',\n    languages: {\n      en: 'Armenia',\n      tr: 'Ermenistan',\n    },\n  },\n  {\n    name: 'Aruba',\n    flag: '🇦🇼',\n    code: 'AW',\n    dial_code: '+297',\n    languages: {\n      en: 'Aruba',\n      tr: 'Aruba',\n    },\n  },\n  {\n    name: 'Australia',\n    flag: '🇦🇺',\n    code: 'AU',\n    dial_code: '+61',\n    languages: {\n      en: 'Australia',\n      tr: 'Avustralya',\n    },\n  },\n  {\n    name: 'Austria',\n    flag: '🇦🇹',\n    code: 'AT',\n    dial_code: '+43',\n    languages: {\n      en: 'Austria',\n      tr: 'Avusturya',\n    },\n  },\n  {\n    name: 'Azerbaijan',\n    flag: '🇦🇿',\n    code: 'AZ',\n    dial_code: '+994',\n    languages: {\n      en: 'Azerbaijan',\n      tr: 'Azerbaycan',\n    },\n  },\n  {\n    name: 'Bahamas',\n    flag: '🇧🇸',\n    code: 'BS',\n    dial_code: '+1242',\n    languages: {\n      en: 'Bahamas',\n      tr: 'Bahamalar',\n    },\n  },\n  {\n    name: 'Bahrain',\n    flag: '🇧🇭',\n    code: 'BH',\n    dial_code: '+973',\n    languages: {\n      en: 'Bahrain',\n      tr: 'Bahreyn',\n    },\n  },\n  {\n    name: 'Bangladesh',\n    flag: '🇧🇩',\n    code: 'BD',\n    dial_code: '+880',\n    languages: {\n      en: 'Bangladesh',\n      tr: 'Bangladeş',\n    },\n  },\n  {\n    name: 'Barbados',\n    flag: '🇧🇧',\n    code: 'BB',\n    dial_code: '+1246',\n    languages: {\n      en: 'Barbados',\n      tr: 'Barbados',\n    },\n  },\n  {\n    name: 'Belarus',\n    flag: '🇧🇾',\n    code: 'BY',\n    dial_code: '+375',\n    languages: {\n      en: 'Belarus',\n      tr: 'Belarus',\n    },\n  },\n  {\n    name: 'Belgium',\n    flag: '🇧🇪',\n    code: 'BE',\n    dial_code: '+32',\n    languages: {\n      en: 'Belgium',\n      tr: 'Belçika',\n    },\n  },\n  {\n    name: 'Belize',\n    flag: '🇧🇿',\n    code: 'BZ',\n    dial_code: '+501',\n    languages: {\n      en: 'Belize',\n      tr: 'Belize',\n    },\n  },\n  {\n    name: 'Benin',\n    flag: '🇧🇯',\n    code: 'BJ',\n    dial_code: '+229',\n    languages: {\n      en: 'Benin',\n      tr: 'Benin',\n    },\n  },\n  {\n    name: 'Bermuda',\n    flag: '🇧🇲',\n    code: 'BM',\n    dial_code: '+1441',\n    languages: {\n      en: 'Bermuda',\n      tr: 'Bermuda',\n    },\n  },\n  {\n    name: 'Bhutan',\n    flag: '🇧🇹',\n    code: 'BT',\n    dial_code: '+975',\n    languages: {\n      en: 'Bhutan',\n      tr: 'Butan',\n    },\n  },\n  {\n    name: 'Bolivia, Plurinational State of bolivia',\n    flag: '🇧🇴',\n    code: 'BO',\n    dial_code: '+591',\n    languages: {\n      en: 'Bolivia, Plurinational State of bolivia',\n      tr: 'Bolivya, Bolivya Çokuluslu Devleti',\n    },\n  },\n  {\n    name: 'Bosnia and Herzegovina',\n    flag: '🇧🇦',\n    code: 'BA',\n    dial_code: '+387',\n    languages: {\n      en: 'Bosnia and Herzegovina',\n      tr: 'Bosna Hersek',\n    },\n  },\n  {\n    name: 'Botswana',\n    flag: '🇧🇼',\n    code: 'BW',\n    dial_code: '+267',\n    languages: {\n      en: 'Botswana',\n      tr: 'Botsvana',\n    },\n  },\n  {\n    name: 'Bouvet Island',\n    flag: '🇧🇻',\n    code: 'BV',\n    dial_code: '+47',\n    languages: {\n      en: 'Bouvet Island',\n      tr: 'Bouvet Adası',\n    },\n  },\n  {\n    name: 'Brazil',\n    flag: '🇧🇷',\n    code: 'BR',\n    dial_code: '+55',\n    languages: {\n      en: 'Brazil',\n      tr: 'Brezilya',\n    },\n  },\n  {\n    name: 'British Indian Ocean Territory',\n    flag: '🇮🇴',\n    code: 'IO',\n    dial_code: '+246',\n    languages: {\n      en: 'British Indian Ocean Territory',\n      tr: 'Britanya Hint Okyanusu Toprakları',\n    },\n  },\n  {\n    name: 'Brunei Darussalam',\n    flag: '🇧🇳',\n    code: 'BN',\n    dial_code: '+673',\n    languages: {\n      en: 'Brunei Darussalam',\n      tr: 'Brunei Darusselam',\n    },\n  },\n  {\n    name: 'Bulgaria',\n    flag: '🇧🇬',\n    code: 'BG',\n    dial_code: '+359',\n    languages: {\n      en: 'Bulgaria',\n      tr: 'Bulgaristan',\n    },\n  },\n  {\n    name: 'Burkina Faso',\n    flag: '🇧🇫',\n    code: 'BF',\n    dial_code: '+226',\n    languages: {\n      en: 'Burkina Faso',\n      tr: 'Burkina Faso',\n    },\n  },\n  {\n    name: 'Burundi',\n    flag: '🇧🇮',\n    code: 'BI',\n    dial_code: '+257',\n    languages: {\n      en: 'Burundi',\n      tr: 'Burundi',\n    },\n  },\n  {\n    name: 'Cambodia',\n    flag: '🇰🇭',\n    code: 'KH',\n    dial_code: '+855',\n    languages: {\n      en: 'Cambodia',\n      tr: 'Kamboçya',\n    },\n  },\n  {\n    name: 'Cameroon',\n    flag: '🇨🇲',\n    code: 'CM',\n    dial_code: '+237',\n    languages: {\n      en: 'Cameroon',\n      tr: 'Kamerun',\n    },\n  },\n  {\n    name: 'Canada',\n    flag: '🇨🇦',\n    code: 'CA',\n    dial_code: '+1',\n    languages: {\n      en: 'Canada',\n      tr: 'Kanada',\n    },\n  },\n  {\n    name: 'Cape Verde',\n    flag: '🇨🇻',\n    code: 'CV',\n    dial_code: '+238',\n    languages: {\n      en: 'Cape Verde',\n      tr: 'Yeşil Burun Adaları',\n    },\n  },\n  {\n    name: 'Cayman Islands',\n    flag: '🇰🇾',\n    code: 'KY',\n    dial_code: '+345',\n    languages: {\n      en: 'Cayman Islands',\n      tr: 'Kayman Adaları',\n    },\n  },\n  {\n    name: 'Central African Republic',\n    flag: '🇨🇫',\n    code: 'CF',\n    dial_code: '+236',\n    languages: {\n      en: 'Central African Republic',\n      tr: 'Orta Afrika Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Chad',\n    flag: '🇹🇩',\n    code: 'TD',\n    dial_code: '+235',\n    languages: {\n      en: 'Chad',\n      tr: 'Çad',\n    },\n  },\n  {\n    name: 'Chile',\n    flag: '🇨🇱',\n    code: 'CL',\n    dial_code: '+56',\n    languages: {\n      en: 'Chile',\n      tr: 'Şili',\n    },\n  },\n  {\n    name: 'China',\n    flag: '🇨🇳',\n    code: 'CN',\n    dial_code: '+86',\n    languages: {\n      en: 'China',\n      tr: 'Çin',\n    },\n  },\n  {\n    name: 'Christmas Island',\n    flag: '🇨🇽',\n    code: 'CX',\n    dial_code: '+61',\n    languages: {\n      en: 'Christmas Island',\n      tr: 'Christmas Adası',\n    },\n  },\n  {\n    name: 'Cocos (Keeling) Islands',\n    flag: '🇨🇨',\n    code: 'CC',\n    dial_code: '+61',\n    languages: {\n      en: 'Cocos (Keeling) Islands',\n      tr: 'Cocos (Keeling) Adaları',\n    },\n  },\n  {\n    name: 'Colombia',\n    flag: '🇨🇴',\n    code: 'CO',\n    dial_code: '+57',\n    languages: {\n      en: 'Colombia',\n      tr: 'Kolombiya',\n    },\n  },\n  {\n    name: 'Comoros',\n    flag: '🇰🇲',\n    code: 'KM',\n    dial_code: '+269',\n    languages: {\n      en: 'Comoros',\n      tr: 'Komorlar',\n    },\n  },\n  {\n    name: 'Congo',\n    flag: '🇨🇬',\n    code: 'CG',\n    dial_code: '+242',\n    languages: {\n      en: 'Congo',\n      tr: 'Kongo',\n    },\n  },\n  {\n    name: 'Congo, The Democratic Republic of the Congo',\n    flag: '🇨🇩',\n    code: 'CD',\n    dial_code: '+243',\n    languages: {\n      en: 'Congo, The Democratic Republic of the Congo',\n      tr: 'Kongo, Demokratik Kongo Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Cook Islands',\n    flag: '🇨🇰',\n    code: 'CK',\n    dial_code: '+682',\n    languages: {\n      en: 'Cook Islands',\n      tr: 'Cook Adaları',\n    },\n  },\n  {\n    name: 'Costa Rica',\n    flag: '🇨🇷',\n    code: 'CR',\n    dial_code: '+506',\n    languages: {\n      en: 'Costa Rica',\n      tr: 'Kosta Rika',\n    },\n  },\n  {\n    name: \"Cote d'Ivoire\",\n    flag: '🇨🇮',\n    code: 'CI',\n    dial_code: '+225',\n    languages: {\n      en: \"Cote d'Ivoire\",\n      tr: 'Fildişi Sahili',\n    },\n  },\n  {\n    name: 'Croatia',\n    flag: '🇭🇷',\n    code: 'HR',\n    dial_code: '+385',\n    languages: {\n      en: 'Croatia',\n      tr: 'Hırvatistan',\n    },\n  },\n  {\n    name: 'Cuba',\n    flag: '🇨🇺',\n    code: 'CU',\n    dial_code: '+53',\n    languages: {\n      en: 'Cuba',\n      tr: 'Küba',\n    },\n  },\n  {\n    name: 'Curaçao',\n    flag: '🇨🇼',\n    code: 'CW',\n    dial_code: '+599',\n    languages: {\n      en: 'Curaçao',\n      tr: 'Küba, Kıbrıs',\n    },\n  },\n  {\n    name: 'Cyprus',\n    flag: '🇨🇾',\n    code: 'CY',\n    dial_code: '+357',\n    languages: {\n      en: 'Cyprus',\n      tr: 'Kıbrıs',\n    },\n  },\n  {\n    name: 'Czech Republic',\n    flag: '🇨🇿',\n    code: 'CZ',\n    dial_code: '+420',\n    languages: {\n      en: 'Czech Republic',\n      tr: 'Çek Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Denmark',\n    flag: '🇩🇰',\n    code: 'DK',\n    dial_code: '+45',\n    languages: {\n      en: 'Denmark',\n      tr: 'Danimarka',\n    },\n  },\n  {\n    name: 'Djibouti',\n    flag: '🇩🇯',\n    code: 'DJ',\n    dial_code: '+253',\n    languages: {\n      en: 'Djibouti',\n      tr: 'Cibuti',\n    },\n  },\n  {\n    name: 'Dominica',\n    flag: '🇩🇲',\n    code: 'DM',\n    dial_code: '+1767',\n    languages: {\n      en: 'Dominica',\n      tr: 'Dominika',\n    },\n  },\n  {\n    name: 'Dominican Republic',\n    flag: '🇩🇴',\n    code: 'DO',\n    dial_code: '+1849',\n    languages: {\n      en: 'Dominican Republic',\n      tr: 'Dominik Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Ecuador',\n    flag: '🇪🇨',\n    code: 'EC',\n    dial_code: '+593',\n    languages: {\n      en: 'Ecuador',\n      tr: 'Ekvador',\n    },\n  },\n  {\n    name: 'Egypt',\n    flag: '🇪🇬',\n    code: 'EG',\n    dial_code: '+20',\n    languages: {\n      en: 'Egypt',\n      tr: 'Mısır',\n    },\n  },\n  {\n    name: 'El Salvador',\n    flag: '🇸🇻',\n    code: 'SV',\n    dial_code: '+503',\n    languages: {\n      en: 'El Salvador',\n      tr: 'El Salvador',\n    },\n  },\n  {\n    name: 'Equatorial Guinea',\n    flag: '🇬🇶',\n    code: 'GQ',\n    dial_code: '+240',\n    languages: {\n      en: 'Equatorial Guinea',\n      tr: 'Ekvator Ginesi',\n    },\n  },\n  {\n    name: 'Eritrea',\n    flag: '🇪🇷',\n    code: 'ER',\n    dial_code: '+291',\n    languages: {\n      en: 'Eritrea',\n      tr: 'Eritre',\n    },\n  },\n  {\n    name: 'Estonia',\n    flag: '🇪🇪',\n    code: 'EE',\n    dial_code: '+372',\n    languages: {\n      en: 'Estonia',\n      tr: 'Estonya',\n    },\n  },\n  {\n    name: 'Ethiopia',\n    flag: '🇪🇹',\n    code: 'ET',\n    dial_code: '+251',\n    languages: {\n      en: 'Ethiopia',\n      tr: 'Etiyopya',\n    },\n  },\n  {\n    name: 'Falkland Islands (Malvinas)',\n    flag: '🇫🇰',\n    code: 'FK',\n    dial_code: '+500',\n    languages: {\n      en: 'Falkland Islands (Malvinas)',\n      tr: 'Falkland Adaları (Malvinas)',\n    },\n  },\n  {\n    name: 'Faroe Islands',\n    flag: '🇫🇴',\n    code: 'FO',\n    dial_code: '+298',\n    languages: {\n      en: 'Faroe Islands',\n      tr: 'Faroe Adaları',\n    },\n  },\n  {\n    name: 'Fiji',\n    flag: '🇫🇯',\n    code: 'FJ',\n    dial_code: '+679',\n    languages: {\n      en: 'Fiji',\n      tr: 'Fiji',\n    },\n  },\n  {\n    name: 'Finland',\n    flag: '🇫🇮',\n    code: 'FI',\n    dial_code: '+358',\n    languages: {\n      en: 'Finland',\n      tr: 'Finlandiya',\n    },\n  },\n  {\n    name: 'France',\n    flag: '🇫🇷',\n    code: 'FR',\n    dial_code: '+33',\n    languages: {\n      en: 'France',\n      tr: 'Fransa',\n    },\n  },\n  {\n    name: 'French Guiana',\n    flag: '🇬🇫',\n    code: 'GF',\n    dial_code: '+594',\n    languages: {\n      en: 'French Guiana',\n      tr: 'Fransız Guyanası',\n    },\n  },\n  {\n    name: 'French Polynesia',\n    flag: '🇵🇫',\n    code: 'PF',\n    dial_code: '+689',\n    languages: {\n      en: 'French Polynesia',\n      tr: 'Fransız Polinezyası',\n    },\n  },\n  {\n    name: 'French Southern Territories',\n    flag: '🇹🇫',\n    code: 'TF',\n    dial_code: '+262',\n    languages: {\n      en: 'French Southern Territories',\n      tr: 'Fransız Güney Toprakları',\n    },\n  },\n  {\n    name: 'Gabon',\n    flag: '🇬🇦',\n    code: 'GA',\n    dial_code: '+241',\n    languages: {\n      en: 'Gabon',\n      tr: 'Gabon',\n    },\n  },\n  {\n    name: 'Gambia',\n    flag: '🇬🇲',\n    code: 'GM',\n    dial_code: '+220',\n    languages: {\n      en: 'Gambia',\n      tr: 'Gambiya',\n    },\n  },\n  {\n    name: 'Georgia',\n    flag: '🇬🇪',\n    code: 'GE',\n    dial_code: '+995',\n    languages: {\n      en: 'Georgia',\n      tr: 'Gürcistan',\n    },\n  },\n  {\n    name: 'Germany',\n    flag: '🇩🇪',\n    code: 'DE',\n    dial_code: '+49',\n    languages: {\n      en: 'Germany',\n      tr: 'Almanya',\n    },\n  },\n  {\n    name: 'Ghana',\n    flag: '🇬🇭',\n    code: 'GH',\n    dial_code: '+233',\n    languages: {\n      en: 'Ghana',\n      tr: 'Gana',\n    },\n  },\n  {\n    name: 'Gibraltar',\n    flag: '🇬🇮',\n    code: 'GI',\n    dial_code: '+350',\n    languages: {\n      en: 'Gibraltar',\n      tr: 'Cebelitarık',\n    },\n  },\n  {\n    name: 'Greece',\n    flag: '🇬🇷',\n    code: 'GR',\n    dial_code: '+30',\n    languages: {\n      en: 'Greece',\n      tr: 'Yunanistan',\n    },\n  },\n  {\n    name: 'Greenland',\n    flag: '🇬🇱',\n    code: 'GL',\n    dial_code: '+299',\n    languages: {\n      en: 'Greenland',\n      tr: 'Grönland',\n    },\n  },\n  {\n    name: 'Grenada',\n    flag: '🇬🇩',\n    code: 'GD',\n    dial_code: '+1473',\n    languages: {\n      en: 'Grenada',\n      tr: 'Grenada',\n    },\n  },\n  {\n    name: 'Guadeloupe',\n    flag: '🇬🇵',\n    code: 'GP',\n    dial_code: '+590',\n    languages: {\n      en: 'Guadeloupe',\n      tr: 'Guadeloupe',\n    },\n  },\n  {\n    name: 'Guam',\n    flag: '🇬🇺',\n    code: 'GU',\n    dial_code: '+1671',\n    languages: {\n      en: 'Guam',\n      tr: 'Guam',\n    },\n  },\n  {\n    name: 'Guatemala',\n    flag: '🇬🇹',\n    code: 'GT',\n    dial_code: '+502',\n    languages: {\n      en: 'Guatemala',\n      tr: 'Guatemala',\n    },\n  },\n  {\n    name: 'Guernsey',\n    flag: '🇬🇬',\n    code: 'GG',\n    dial_code: '+44',\n    languages: {\n      en: 'Guernsey',\n      tr: 'Guernsey',\n    },\n  },\n  {\n    name: 'Guinea',\n    flag: '🇬🇳',\n    code: 'GN',\n    dial_code: '+224',\n    languages: {\n      en: 'Guinea',\n      tr: 'Gine',\n    },\n  },\n  {\n    name: 'Guinea-Bissau',\n    flag: '🇬🇼',\n    code: 'GW',\n    dial_code: '+245',\n    languages: {\n      en: 'Guinea-Bissau',\n      tr: 'Gine-Bissau',\n    },\n  },\n  {\n    name: 'Guyana',\n    flag: '🇬🇾',\n    code: 'GY',\n    dial_code: '+592',\n    languages: {\n      en: 'Guyana',\n      tr: 'Guyana',\n    },\n  },\n  {\n    name: 'Haiti',\n    flag: '🇭🇹',\n    code: 'HT',\n    dial_code: '+509',\n    languages: {\n      en: 'Haiti',\n      tr: 'Haiti',\n    },\n  },\n  {\n    name: 'Heard Island and McDonald Islands',\n    flag: '🇭🇲',\n    code: 'HM',\n    dial_code: '+672',\n    languages: {\n      en: 'Heard Island and McDonald Islands',\n      tr: 'Heard Adası ve McDonald Adaları',\n    },\n  },\n  {\n    name: 'Holy See (Vatican City State)',\n    flag: '🇻🇦',\n    code: 'VA',\n    dial_code: '+379',\n    languages: {\n      en: 'Holy See (Vatican City State)',\n      tr: 'Vatikan Şehri Devleti',\n    },\n  },\n  {\n    name: 'Honduras',\n    flag: '🇭🇳',\n    code: 'HN',\n    dial_code: '+504',\n    languages: {\n      en: 'Honduras',\n      tr: 'Honduras',\n    },\n  },\n  {\n    name: 'Hong Kong',\n    flag: '🇭🇰',\n    code: 'HK',\n    dial_code: '+852',\n    languages: {\n      en: 'Hong Kong',\n      tr: 'Hong Kong',\n    },\n  },\n  {\n    name: 'Hungary',\n    flag: '🇭🇺',\n    code: 'HU',\n    dial_code: '+36',\n    languages: {\n      en: 'Hungary',\n      tr: 'Macaristan',\n    },\n  },\n  {\n    name: 'Iceland',\n    flag: '🇮🇸',\n    code: 'IS',\n    dial_code: '+354',\n    languages: {\n      en: 'Iceland',\n      tr: 'İzlanda',\n    },\n  },\n  {\n    name: 'India',\n    flag: '🇮🇳',\n    code: 'IN',\n    dial_code: '+91',\n    languages: {\n      en: 'India',\n      tr: 'Hindistan',\n    },\n  },\n  {\n    name: 'Indonesia',\n    flag: '🇮🇩',\n    code: 'ID',\n    dial_code: '+62',\n    languages: {\n      en: 'Indonesia',\n      tr: 'Endonezya',\n    },\n  },\n  {\n    name: 'Iran, Islamic Republic of Persian Gulf',\n    flag: '🇮🇷',\n    code: 'IR',\n    dial_code: '+98',\n    languages: {\n      en: 'Iran, Islamic Republic of Persian Gulf',\n      tr: 'İran, İslam Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Iraq',\n    flag: '🇮🇶',\n    code: 'IQ',\n    dial_code: '+964',\n    languages: {\n      en: 'Iraq',\n      tr: 'Irak',\n    },\n  },\n  {\n    name: 'Ireland',\n    flag: '🇮🇪',\n    code: 'IE',\n    dial_code: '+353',\n    languages: {\n      en: 'Ireland',\n      tr: 'İrlanda',\n    },\n  },\n  {\n    name: 'Isle of Man',\n    flag: '🇮🇲',\n    code: 'IM',\n    dial_code: '+44',\n    languages: {\n      en: 'Isle of Man',\n      tr: 'Man Adası',\n    },\n  },\n  {\n    name: 'Israel',\n    flag: '🇮🇱',\n    code: 'IL',\n    dial_code: '+972',\n    languages: {\n      en: 'Israel',\n      tr: 'İsrail',\n    },\n  },\n  {\n    name: 'Italy',\n    flag: '🇮🇹',\n    code: 'IT',\n    dial_code: '+39',\n    languages: {\n      en: 'Italy',\n      tr: 'İtalya',\n    },\n  },\n  {\n    name: 'Jamaica',\n    flag: '🇯🇲',\n    code: 'JM',\n    dial_code: '+1876',\n    languages: {\n      en: 'Jamaica',\n      tr: 'Jamaika',\n    },\n  },\n  {\n    name: 'Japan',\n    flag: '🇯🇵',\n    code: 'JP',\n    dial_code: '+81',\n    languages: {\n      en: 'Japan',\n      tr: 'Japonya',\n    },\n  },\n  {\n    name: 'Jersey',\n    flag: '🇯🇪',\n    code: 'JE',\n    dial_code: '+44',\n    languages: {\n      en: 'Jersey',\n      tr: 'Jersey',\n    },\n  },\n  {\n    name: 'Jordan',\n    flag: '🇯🇴',\n    code: 'JO',\n    dial_code: '+962',\n    languages: {\n      en: 'Jordan',\n      tr: 'Ürdün',\n    },\n  },\n  {\n    name: 'Kazakhstan',\n    flag: '🇰🇿',\n    code: 'KZ',\n    dial_code: '+7',\n    languages: {\n      en: 'Kazakhstan',\n      tr: 'Kazakistan',\n    },\n  },\n  {\n    name: 'Kenya',\n    flag: '🇰🇪',\n    code: 'KE',\n    dial_code: '+254',\n    languages: {\n      en: 'Kenya',\n      tr: 'Kenya',\n    },\n  },\n  {\n    name: 'Kiribati',\n    flag: '🇰🇮',\n    code: 'KI',\n    dial_code: '+686',\n    languages: {\n      en: 'Kiribati',\n      tr: 'Kiribati',\n    },\n  },\n  {\n    name: \"Korea, Democratic People's Republic of Korea\",\n    flag: '🇰🇵',\n    code: 'KP',\n    dial_code: '+850',\n    languages: {\n      en: \"Korea, Democratic People's Republic of Korea\",\n      tr: 'Kore Demokratik Halk Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Korea, Republic of South Korea',\n    flag: '🇰🇷',\n    code: 'KR',\n    dial_code: '+82',\n    languages: {\n      en: 'Korea, Republic of South Korea',\n      tr: 'Kore Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Kuwait',\n    flag: '🇰🇼',\n    code: 'KW',\n    dial_code: '+965',\n    languages: {\n      en: 'Kuwait',\n      tr: 'Kuveyt',\n    },\n  },\n  {\n    name: 'Kyrgyzstan',\n    flag: '🇰🇬',\n    code: 'KG',\n    dial_code: '+996',\n    languages: {\n      en: 'Kyrgyzstan',\n      tr: 'Kırgızistan',\n    },\n  },\n  {\n    name: 'Laos',\n    flag: '🇱🇦',\n    code: 'LA',\n    dial_code: '+856',\n    languages: {\n      en: 'Laos',\n      tr: 'Lao, Demokratik Halk Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Latvia',\n    flag: '🇱🇻',\n    code: 'LV',\n    dial_code: '+371',\n    languages: {\n      en: 'Latvia',\n      tr: 'Letonya',\n    },\n  },\n  {\n    name: 'Lebanon',\n    flag: '🇱🇧',\n    code: 'LB',\n    dial_code: '+961',\n    languages: {\n      en: 'Lebanon',\n      tr: 'Lübnan',\n    },\n  },\n  {\n    name: 'Lesotho',\n    flag: '🇱🇸',\n    code: 'LS',\n    dial_code: '+266',\n    languages: {\n      en: 'Lesotho',\n      tr: 'Lesoto',\n    },\n  },\n  {\n    name: 'Liberia',\n    flag: '🇱🇷',\n    code: 'LR',\n    dial_code: '+231',\n    languages: {\n      en: 'Liberia',\n      tr: 'Liberya',\n    },\n  },\n  {\n    name: 'Libyan Arab Jamahiriya',\n    flag: '🇱🇾',\n    code: 'LY',\n    dial_code: '+218',\n    languages: {\n      en: 'Libyan Arab Jamahiriya',\n      tr: 'Libya',\n    },\n  },\n  {\n    name: 'Liechtenstein',\n    flag: '🇱🇮',\n    code: 'LI',\n    dial_code: '+423',\n    languages: {\n      en: 'Liechtenstein',\n      tr: 'Liechtenstein',\n    },\n  },\n  {\n    name: 'Lithuania',\n    flag: '🇱🇹',\n    code: 'LT',\n    dial_code: '+370',\n    languages: {\n      en: 'Lithuania',\n      tr: 'Litvanya',\n    },\n  },\n  {\n    name: 'Luxembourg',\n    flag: '🇱🇺',\n    code: 'LU',\n    dial_code: '+352',\n    languages: {\n      en: 'Luxembourg',\n      tr: 'Lüksemburg',\n    },\n  },\n  {\n    name: 'Macao',\n    flag: '🇲🇴',\n    code: 'MO',\n    dial_code: '+853',\n    languages: {\n      en: 'Macao',\n      tr: 'Makao',\n    },\n  },\n  {\n    name: 'Macedonia',\n    flag: '🇲🇰',\n    code: 'MK',\n    dial_code: '+389',\n    languages: {\n      en: 'Macedonia',\n      tr: 'Makedonya, Eski Yugoslav Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Madagascar',\n    flag: '🇲🇬',\n    code: 'MG',\n    dial_code: '+261',\n    languages: {\n      en: 'Madagascar',\n      tr: 'Madagaskar',\n    },\n  },\n  {\n    name: 'Malawi',\n    flag: '🇲🇼',\n    code: 'MW',\n    dial_code: '+265',\n    languages: {\n      en: 'Malawi',\n      tr: 'Malavi',\n    },\n  },\n  {\n    name: 'Malaysia',\n    flag: '🇲🇾',\n    code: 'MY',\n    dial_code: '+60',\n    languages: {\n      en: 'Malaysia',\n      tr: 'Malezya',\n    },\n  },\n  {\n    name: 'Maldives',\n    flag: '🇲🇻',\n    code: 'MV',\n    dial_code: '+960',\n    languages: {\n      en: 'Maldives',\n      tr: 'Maldivler',\n    },\n  },\n  {\n    name: 'Mali',\n    flag: '🇲🇱',\n    code: 'ML',\n    dial_code: '+223',\n    languages: {\n      en: 'Mali',\n      tr: 'Mali',\n    },\n  },\n  {\n    name: 'Malta',\n    flag: '🇲🇹',\n    code: 'MT',\n    dial_code: '+356',\n    languages: {\n      en: 'Malta',\n      tr: 'Malta',\n    },\n  },\n  {\n    name: 'Marshall Islands',\n    flag: '🇲🇭',\n    code: 'MH',\n    dial_code: '+692',\n    languages: {\n      en: 'Marshall Islands',\n      tr: 'Marshall Adaları',\n    },\n  },\n  {\n    name: 'Martinique',\n    flag: '🇲🇶',\n    code: 'MQ',\n    dial_code: '+596',\n    languages: {\n      en: 'Martinique',\n      tr: 'Martinik',\n    },\n  },\n  {\n    name: 'Mauritania',\n    flag: '🇲🇷',\n    code: 'MR',\n    dial_code: '+222',\n    languages: {\n      en: 'Mauritania',\n      tr: 'Moritanya',\n    },\n  },\n  {\n    name: 'Mauritius',\n    flag: '🇲🇺',\n    code: 'MU',\n    dial_code: '+230',\n    languages: {\n      en: 'Mauritius',\n      tr: 'Mauritius',\n    },\n  },\n  {\n    name: 'Mayotte',\n    flag: '🇾🇹',\n    code: 'YT',\n    dial_code: '+262',\n    languages: {\n      en: 'Mayotte',\n      tr: 'Mayotte',\n    },\n  },\n  {\n    name: 'Mexico',\n    flag: '🇲🇽',\n    code: 'MX',\n    dial_code: '+52',\n    languages: {\n      en: 'Mexico',\n      tr: 'Meksika',\n    },\n  },\n  {\n    name: 'Micronesia, Federated States of Micronesia',\n    flag: '🇫🇲',\n    code: 'FM',\n    dial_code: '+691',\n    languages: {\n      en: 'Micronesia, Federated States of Micronesia',\n      tr: 'Mikronezya, Federe Devletleri',\n    },\n  },\n  {\n    name: 'Moldova',\n    flag: '🇲🇩',\n    code: 'MD',\n    dial_code: '+373',\n    languages: {\n      en: 'Moldova',\n      tr: 'Moldova',\n    },\n  },\n  {\n    name: 'Monaco',\n    flag: '🇲🇨',\n    code: 'MC',\n    dial_code: '+377',\n    languages: {\n      en: 'Monaco',\n      tr: 'Monako',\n    },\n  },\n  {\n    name: 'Mongolia',\n    flag: '🇲🇳',\n    code: 'MN',\n    dial_code: '+976',\n    languages: {\n      en: 'Mongolia',\n      tr: 'Moğolistan',\n    },\n  },\n  {\n    name: 'Montenegro',\n    flag: '🇲🇪',\n    code: 'ME',\n    dial_code: '+382',\n    languages: {\n      en: 'Montenegro',\n      tr: 'Karadağ',\n    },\n  },\n  {\n    name: 'Montserrat',\n    flag: '🇲🇸',\n    code: 'MS',\n    dial_code: '+1664',\n    languages: {\n      en: 'Montserrat',\n      tr: 'Montserrat',\n    },\n  },\n  {\n    name: 'Morocco',\n    flag: '🇲🇦',\n    code: 'MA',\n    dial_code: '+212',\n    languages: {\n      en: 'Morocco',\n      tr: 'Fas',\n    },\n  },\n  {\n    name: 'Mozambique',\n    flag: '🇲🇿',\n    code: 'MZ',\n    dial_code: '+258',\n    languages: {\n      en: 'Mozambique',\n      tr: 'Mozambik',\n    },\n  },\n  {\n    name: 'Myanmar',\n    flag: '🇲🇲',\n    code: 'MM',\n    dial_code: '+95',\n    languages: {\n      en: 'Myanmar',\n      tr: 'Myanmar',\n    },\n  },\n  {\n    name: 'Namibia',\n    flag: '🇳🇦',\n    code: 'NA',\n    dial_code: '+264',\n    languages: {\n      en: 'Namibia',\n      tr: 'Namibya',\n    },\n  },\n  {\n    name: 'Nauru',\n    flag: '🇳🇷',\n    code: 'NR',\n    dial_code: '+674',\n    languages: {\n      en: 'Nauru',\n      tr: 'Nauru',\n    },\n  },\n  {\n    name: 'Nepal',\n    flag: '🇳🇵',\n    code: 'NP',\n    dial_code: '+977',\n    languages: {\n      en: 'Nepal',\n      tr: 'Nepal',\n    },\n  },\n  {\n    name: 'Netherlands',\n    flag: '🇳🇱',\n    code: 'NL',\n    dial_code: '+31',\n    languages: {\n      en: 'Netherlands',\n      tr: 'Hollanda',\n    },\n  },\n  {\n    name: 'Netherlands Antilles',\n    flag: '🇦🇳',\n    code: 'AN',\n    dial_code: '+599',\n    languages: {\n      en: 'Netherlands Antilles',\n      tr: 'Hollanda Antilleri',\n    },\n  },\n  {\n    name: 'New Caledonia',\n    flag: '🇳🇨',\n    code: 'NC',\n    dial_code: '+687',\n    languages: {\n      en: 'New Caledonia',\n      tr: 'Yeni Kaledonya',\n    },\n  },\n  {\n    name: 'New Zealand',\n    flag: '🇳🇿',\n    code: 'NZ',\n    dial_code: '+64',\n    languages: {\n      en: 'New Zealand',\n      tr: 'Yeni Zelanda',\n    },\n  },\n  {\n    name: 'Nicaragua',\n    flag: '🇳🇮',\n    code: 'NI',\n    dial_code: '+505',\n    languages: {\n      en: 'Nicaragua',\n      tr: 'Nikaragua',\n    },\n  },\n  {\n    name: 'Niger',\n    flag: '🇳🇪',\n    code: 'NE',\n    dial_code: '+227',\n    languages: {\n      en: 'Niger',\n      tr: 'Nijer',\n    },\n  },\n  {\n    name: 'Nigeria',\n    flag: '🇳🇬',\n    code: 'NG',\n    dial_code: '+234',\n    languages: {\n      en: 'Nigeria',\n      tr: 'Nijerya',\n    },\n  },\n  {\n    name: 'Niue',\n    flag: '🇳🇺',\n    code: 'NU',\n    dial_code: '+683',\n    languages: {\n      en: 'Niue',\n      tr: 'Niue',\n    },\n  },\n  {\n    name: 'Norfolk Island',\n    flag: '🇳🇫',\n    code: 'NF',\n    dial_code: '+672',\n    languages: {\n      en: 'Norfolk Island',\n      tr: 'Norfolk Adası',\n    },\n  },\n  {\n    name: 'Northern Mariana Islands',\n    flag: '🇲🇵',\n    code: 'MP',\n    dial_code: '+1670',\n    languages: {\n      en: 'Northern Mariana Islands',\n      tr: 'Kuzey Mariana Adaları',\n    },\n  },\n  {\n    name: 'Norway',\n    flag: '🇳🇴',\n    code: 'NO',\n    dial_code: '+47',\n    languages: {\n      en: 'Norway',\n      tr: 'Norveç',\n    },\n  },\n  {\n    name: 'Oman',\n    flag: '🇴🇲',\n    code: 'OM',\n    dial_code: '+968',\n    languages: {\n      en: 'Oman',\n      tr: 'Umman',\n    },\n  },\n  {\n    name: 'Pakistan',\n    flag: '🇵🇰',\n    code: 'PK',\n    dial_code: '+92',\n    languages: {\n      en: 'Pakistan',\n      tr: 'Pakistan',\n    },\n  },\n  {\n    name: 'Palau',\n    flag: '🇵🇼',\n    code: 'PW',\n    dial_code: '+680',\n    languages: {\n      en: 'Palau',\n      tr: 'Palau',\n    },\n  },\n  {\n    name: 'Palestinian Territory, Occupied',\n    flag: '🇵🇸',\n    code: 'PS',\n    dial_code: '+970',\n    languages: {\n      en: 'Palestinian Territory, Occupied',\n      tr: 'Filistin, Devlet',\n    },\n  },\n  {\n    name: 'Panama',\n    flag: '🇵🇦',\n    code: 'PA',\n    dial_code: '+507',\n    languages: {\n      en: 'Panama',\n      tr: 'Panama',\n    },\n  },\n  {\n    name: 'Papua New Guinea',\n    flag: '🇵🇬',\n    code: 'PG',\n    dial_code: '+675',\n    languages: {\n      en: 'Papua New Guinea',\n      tr: 'Papua Yeni Gine',\n    },\n  },\n  {\n    name: 'Paraguay',\n    flag: '🇵🇾',\n    code: 'PY',\n    dial_code: '+595',\n    languages: {\n      en: 'Paraguay',\n      tr: 'Paraguay',\n    },\n  },\n  {\n    name: 'Peru',\n    flag: '🇵🇪',\n    code: 'PE',\n    dial_code: '+51',\n    languages: {\n      en: 'Peru',\n      tr: 'Peru',\n    },\n  },\n  {\n    name: 'Philippines',\n    flag: '🇵🇭',\n    code: 'PH',\n    dial_code: '+63',\n    languages: {\n      en: 'Philippines',\n      tr: 'Filipinler',\n    },\n  },\n  {\n    name: 'Pitcairn',\n    flag: '🇵🇳',\n    code: 'PN',\n    dial_code: '+64',\n    languages: {\n      en: 'Pitcairn',\n      tr: 'Pitcairn',\n    },\n  },\n  {\n    name: 'Poland',\n    flag: '🇵🇱',\n    code: 'PL',\n    dial_code: '+48',\n    languages: {\n      en: 'Poland',\n      tr: 'Polonya',\n    },\n  },\n  {\n    name: 'Portugal',\n    flag: '🇵🇹',\n    code: 'PT',\n    dial_code: '+351',\n    languages: {\n      en: 'Portugal',\n      tr: 'Portekiz',\n    },\n  },\n  {\n    name: 'Puerto Rico',\n    flag: '🇵🇷',\n    code: 'PR',\n    dial_code: '+1939',\n    languages: {\n      en: 'Puerto Rico',\n      tr: 'Porto Riko',\n    },\n  },\n  {\n    name: 'Qatar',\n    flag: '🇶🇦',\n    code: 'QA',\n    dial_code: '+974',\n    languages: {\n      en: 'Qatar',\n      tr: 'Katar',\n    },\n  },\n  {\n    name: 'Romania',\n    flag: '🇷🇴',\n    code: 'RO',\n    dial_code: '+40',\n    languages: {\n      en: 'Romania',\n      tr: 'Romanya',\n    },\n  },\n  {\n    name: 'Russia',\n    flag: '🇷🇺',\n    code: 'RU',\n    dial_code: '+7',\n    languages: {\n      en: 'Russia',\n      tr: 'Rusya Federasyonu',\n    },\n  },\n  {\n    name: 'Rwanda',\n    flag: '🇷🇼',\n    code: '+250',\n    languages: {\n      en: 'Rwanda',\n      tr: 'Ruanda',\n    },\n  },\n  {\n    name: 'Reunion',\n    flag: '🇷🇪',\n    code: '+262',\n    languages: {\n      en: 'Reunion',\n      tr: 'Reunion',\n    },\n  },\n  {\n    name: 'Saint Barthelemy',\n    flag: '🇧🇱',\n    code: 'BL',\n    dial_code: '+590',\n    languages: {\n      en: 'Saint Barthelemy',\n      tr: 'Saint Barthelemy',\n    },\n  },\n  {\n    name: 'Saint Helena, Ascension and Tristan Da Cunha',\n    flag: '🇸🇭',\n    code: 'SH',\n    dial_code: '+290',\n    languages: {\n      en: 'Saint Helena, Ascension and Tristan Da Cunha',\n      tr: 'Saint Helena, Ascension ve Tristan Da Cunha',\n    },\n  },\n  {\n    name: 'Saint Kitts and Nevis',\n    flag: '🇰🇳',\n    code: 'KN',\n    dial_code: '+1869',\n    languages: {\n      en: 'Saint Kitts and Nevis',\n      tr: 'Saint Kitts ve Nevis',\n    },\n  },\n  {\n    name: 'Saint Lucia',\n    flag: '🇱🇨',\n    code: 'LC',\n    dial_code: '+1758',\n    languages: {\n      en: 'Saint Lucia',\n      tr: 'Saint Lucia',\n    },\n  },\n  {\n    name: 'Saint Martin',\n    flag: '🇲🇫',\n    code: 'MF',\n    dial_code: '+590',\n    languages: {\n      en: 'Saint Martin',\n      tr: 'Saint Martin',\n    },\n  },\n  {\n    name: 'Saint Pierre and Miquelon',\n    flag: '🇵🇲',\n    code: 'PM',\n    dial_code: '+508',\n    languages: {\n      en: 'Saint Pierre and Miquelon',\n      tr: 'Saint Pierre ve Miquelon',\n    },\n  },\n  {\n    name: 'Saint Vincent and the Grenadines',\n    flag: '🇻🇨',\n    code: 'VC',\n    dial_code: '+1784',\n    languages: {\n      en: 'Saint Vincent and the Grenadines',\n      tr: 'Saint Vincent ve Grenadinler',\n    },\n  },\n  {\n    name: 'Samoa',\n    flag: '🇼🇸',\n    code: 'WS',\n    dial_code: '+685',\n    languages: {\n      en: 'Samoa',\n      tr: 'Samoa',\n    },\n  },\n  {\n    name: 'San Marino',\n    flag: '🇸🇲',\n    code: 'SM',\n    dial_code: '+378',\n    languages: {\n      en: 'San Marino',\n      tr: 'San Marino',\n    },\n  },\n  {\n    name: 'Sao Tome and Principe',\n    flag: '🇸🇹',\n    code: 'ST',\n    dial_code: '+239',\n    languages: {\n      en: 'Sao Tome and Principe',\n      tr: 'Sao Tome ve Principe',\n    },\n  },\n  {\n    name: 'Saudi Arabia',\n    flag: '🇸🇦',\n    code: 'SA',\n    dial_code: '+966',\n    languages: {\n      en: 'Saudi Arabia',\n      tr: 'Suudi Arabistan',\n    },\n  },\n  {\n    name: 'Senegal',\n    flag: '🇸🇳',\n    code: 'SN',\n    dial_code: '+221',\n    languages: {\n      en: 'Senegal',\n      tr: 'Senegal',\n    },\n  },\n  {\n    name: 'Serbia',\n    flag: '🇷🇸',\n    code: 'RS',\n    dial_code: '+381',\n    languages: {\n      en: 'Serbia',\n      tr: 'Sırbistan',\n    },\n  },\n  {\n    name: 'Seychelles',\n    flag: '🇸🇨',\n    code: 'SC',\n    dial_code: '+248',\n    languages: {\n      en: 'Seychelles',\n      tr: 'Seyşeller',\n    },\n  },\n  {\n    name: 'Sierra Leone',\n    flag: '🇸🇱',\n    code: 'SL',\n    dial_code: '+232',\n    languages: {\n      en: 'Sierra Leone',\n      tr: 'Sierra Leone',\n    },\n  },\n  {\n    name: 'Singapore',\n    flag: '🇸🇬',\n    code: 'SG',\n    dial_code: '+65',\n    languages: {\n      en: 'Singapore',\n      tr: 'Singapur',\n    },\n  },\n  {\n    name: 'Slovakia',\n    flag: '🇸🇰',\n    code: 'SK',\n    dial_code: '+421',\n    languages: {\n      en: 'Slovakia',\n      tr: 'Slovakya',\n    },\n  },\n  {\n    name: 'Slovenia',\n    flag: '🇸🇮',\n    code: 'SI',\n    dial_code: '+386',\n    languages: {\n      en: 'Slovenia',\n      tr: 'Slovenya',\n    },\n  },\n  {\n    name: 'Solomon Islands',\n    flag: '🇸🇧',\n    code: 'SB',\n    dial_code: '+677',\n    languages: {\n      en: 'Solomon Islands',\n      tr: 'Solomon Adaları',\n    },\n  },\n  {\n    name: 'Somalia',\n    flag: '🇸🇴',\n    code: 'SO',\n    dial_code: '+252',\n    languages: {\n      en: 'Somalia',\n      tr: 'Somali',\n    },\n  },\n  {\n    name: 'South Africa',\n    flag: '🇿🇦',\n    code: 'ZA',\n    dial_code: '+27',\n    languages: {\n      en: 'South Africa',\n      tr: 'Güney Afrika',\n    },\n  },\n  {\n    name: 'South Georgia and the South Sandwich Islands',\n    flag: '🇬🇸',\n    code: 'GS',\n    dial_code: '+500',\n    languages: {\n      en: 'South Georgia and the South Sandwich Islands',\n      tr: 'Güney Georgia ve Güney Sandwich Adaları',\n    },\n  },\n  {\n    name: 'Spain',\n    flag: '🇪🇸',\n    code: 'ES',\n    dial_code: '+34',\n    languages: {\n      en: 'Spain',\n      tr: 'İspanya',\n    },\n  },\n  {\n    name: 'Sri Lanka',\n    flag: '🇱🇰',\n    code: 'LK',\n    dial_code: '+94',\n    languages: {\n      en: 'Sri Lanka',\n      tr: 'Sri Lanka',\n    },\n  },\n  {\n    name: 'Sudan',\n    flag: '🇸🇩',\n    code: 'SD',\n    dial_code: '+249',\n    languages: {\n      en: 'Sudan',\n      tr: 'Sudan',\n    },\n  },\n  {\n    name: 'Suriname',\n    flag: '🇸🇷',\n    code: 'SR',\n    dial_code: '+597',\n    languages: {\n      en: 'Suriname',\n      tr: 'Surinam',\n    },\n  },\n  {\n    name: 'Swaziland',\n    flag: '🇸🇿',\n    code: 'SZ',\n    dial_code: '+268',\n    languages: {\n      en: 'Swaziland',\n      tr: 'Svaziland',\n    },\n  },\n  {\n    name: 'Sweden',\n    flag: '🇸🇪',\n    code: 'SE',\n    dial_code: '+46',\n    languages: {\n      en: 'Sweden',\n      tr: 'İsveç',\n    },\n  },\n  {\n    name: 'Switzerland',\n    flag: '🇨🇭',\n    code: 'CH',\n    dial_code: '+41',\n    languages: {\n      en: 'Switzerland',\n      tr: 'İsviçre',\n    },\n  },\n  {\n    name: 'Syrian Arab Republic',\n    flag: '🇸🇾',\n    code: 'SY',\n    dial_code: '+963',\n    languages: {\n      en: 'Syrian Arab Republic',\n      tr: 'Suriye Arap Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Taiwan, Province of China',\n    flag: '🇹🇼',\n    code: 'TW',\n    dial_code: '+886',\n    languages: {\n      en: 'Taiwan, Province of China',\n      tr: 'Tayvan, Çin',\n    },\n  },\n  {\n    name: 'Tajikistan',\n    flag: '🇹🇯',\n    code: 'TJ',\n    dial_code: '+992',\n    languages: {\n      en: 'Tajikistan',\n      tr: 'Tacikistan',\n    },\n  },\n  {\n    name: 'Tanzania, United Republic of Tanzania',\n    flag: '🇹🇿',\n    code: 'TZ',\n    dial_code: '+255',\n    languages: {\n      en: 'Tanzania, United Republic of Tanzania',\n      tr: 'Tanzanya, Birleşik Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Thailand',\n    flag: '🇹🇭',\n    code: 'TH',\n    dial_code: '+66',\n    languages: {\n      en: 'Thailand',\n      tr: 'Tayland',\n    },\n  },\n  {\n    name: 'Timor-Leste',\n    flag: '🇹🇱',\n    code: 'TL',\n    dial_code: '+670',\n    languages: {\n      en: 'Timor-Leste',\n      tr: 'Doğu Timor',\n    },\n  },\n  {\n    name: 'Togo',\n    flag: '🇹🇬',\n    code: 'TG',\n    dial_code: '+228',\n    languages: {\n      en: 'Togo',\n      tr: 'Gitmek',\n    },\n  },\n  {\n    name: 'Tokelau',\n    flag: '🇹🇰',\n    code: 'TK',\n    dial_code: '+690',\n    languages: {\n      en: 'Tokelau',\n      tr: 'Tokelau',\n    },\n  },\n  {\n    name: 'Tonga',\n    flag: '🇹🇴',\n    code: 'TO',\n    dial_code: '+676',\n    languages: {\n      en: 'Tonga',\n      tr: 'Tonga',\n    },\n  },\n  {\n    name: 'Trinidad and Tobago',\n    flag: '🇹🇹',\n    code: 'TT',\n    dial_code: '+1868',\n    languages: {\n      en: 'Trinidad and Tobago',\n      tr: 'Trinidad ve Tobago',\n    },\n  },\n  {\n    name: 'Tunisia',\n    flag: '🇹🇳',\n    code: 'TN',\n    dial_code: '+216',\n    languages: {\n      en: 'Tunisia',\n      tr: 'Tunus',\n    },\n  },\n  {\n    name: 'Turkey',\n    flag: '🇹🇷',\n    code: 'TR',\n    dial_code: '+90',\n    languages: {\n      en: 'Turkey',\n      tr: 'Türkiye',\n    },\n  },\n  {\n    name: 'Turkmenistan',\n    flag: '🇹🇲',\n    code: 'TM',\n    dial_code: '+993',\n    languages: {\n      en: 'Turkmenistan',\n      tr: 'Türkmenistan',\n    },\n  },\n  {\n    name: 'Turks and Caicos Islands',\n    flag: '🇹🇨',\n    code: 'TC',\n    dial_code: '+1649',\n    languages: {\n      en: 'Turks and Caicos Islands',\n      tr: 'Turks ve Caicos Adaları',\n    },\n  },\n  {\n    name: 'Tuvalu',\n    flag: '🇹🇻',\n    code: 'TV',\n    dial_code: '+688',\n    languages: {\n      en: 'Tuvalu',\n      tr: 'Tuvalu',\n    },\n  },\n  {\n    name: 'Uganda',\n    flag: '🇺🇬',\n    code: 'UG',\n    dial_code: '+256',\n    languages: {\n      en: 'Uganda',\n      tr: 'Uganda',\n    },\n  },\n  {\n    name: 'Ukraine',\n    flag: '🇺🇦',\n    code: 'UA',\n    dial_code: '+380',\n    languages: {\n      en: 'Ukraine',\n      tr: 'Ukrayna',\n    },\n  },\n  {\n    name: 'United Arab Emirates',\n    flag: '🇦🇪',\n    code: 'AE',\n    dial_code: '+971',\n    languages: {\n      en: 'United Arab Emirates',\n      tr: 'Birleşik Arap Emirlikleri',\n    },\n  },\n  {\n    name: 'United Kingdom',\n    flag: '🇬🇧',\n    code: 'GB',\n    dial_code: '+44',\n    languages: {\n      en: 'United Kingdom',\n      tr: 'Birleşik Krallık',\n    },\n  },\n  {\n    name: 'United States',\n    flag: '🇺🇸',\n    code: 'US',\n    dial_code: '+1',\n    languages: {\n      en: 'United States',\n      tr: 'Amerika Birleşik Devletleri',\n    },\n  },\n  {\n    name: 'Uruguay',\n    flag: '🇺🇾',\n    code: 'UY',\n    dial_code: '+598',\n    languages: {\n      en: 'Uruguay',\n      tr: 'Uruguay',\n    },\n  },\n  {\n    name: 'Uzbekistan',\n    flag: '🇺🇿',\n    code: 'UZ',\n    dial_code: '+998',\n    languages: {\n      en: 'Uzbekistan',\n      tr: 'Özbekistan',\n    },\n  },\n  {\n    name: 'Vanuatu',\n    flag: '🇻🇺',\n    code: 'VU',\n    dial_code: '+678',\n    languages: {\n      en: 'Vanuatu',\n      tr: 'Vanuatu',\n    },\n  },\n  {\n    name: 'Venezuela, Bolivarian Republic of Venezuela',\n    flag: '🇻🇪',\n    code: 'VE',\n    dial_code: '+58',\n    languages: {\n      en: 'Venezuela, Bolivarian Republic of Venezuela',\n      tr: 'Venezuela, Bolivarcı Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Vietnam',\n    flag: '🇻🇳',\n    code: 'VN',\n    dial_code: '+84',\n    languages: {\n      en: 'Vietnam',\n      tr: 'Vietnam',\n    },\n  },\n  {\n    name: 'Virgin Islands, British',\n    flag: '🇻🇬',\n    code: 'VG',\n    dial_code: '+1284',\n    languages: {\n      en: 'Virgin Islands, British',\n      tr: 'Virgin Adaları, Britanya',\n    },\n  },\n  {\n    name: 'Virgin Islands, U.S.',\n    flag: '🇻🇮',\n    code: 'VI',\n    dial_code: '+1340',\n    languages: {\n      en: 'Virgin Islands, U.S.',\n      tr: 'Virgin Adaları, ABD',\n    },\n  },\n  {\n    name: 'Western Sahara',\n    flag: '🇪🇭',\n    code: 'EH',\n    dial_code: '+212',\n    languages: {\n      en: 'Western Sahara',\n      tr: 'Batı Sahara',\n    },\n  },\n  {\n    name: 'Yemen',\n    flag: '🇾🇪',\n    code: 'YE',\n    dial_code: '+967',\n    languages: {\n      en: 'Yemen',\n      tr: 'Yemen',\n    },\n  },\n  {\n    name: 'Zambia',\n    flag: '🇿🇲',\n    code: 'ZM',\n    dial_code: '+260',\n    languages: {\n      en: 'Zambia',\n      tr: 'Zambiya',\n    },\n  },\n  {\n    name: 'Zimbabwe',\n    flag: '🇿🇼',\n    code: 'ZW',\n    dial_code: '+263',\n    languages: {\n      en: 'Zimbabwe',\n      tr: 'Zimbabve',\n    },\n  },\n]"
            },
            {
                "name": "routeConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/configs/route.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  login: { title: 'Login' },\n  home: {\n    title: 'Home',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  transaction: {\n    title: 'Transactions',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  'hofi-card': {\n    title: 'Hofi Card',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  account: {\n    title: 'Account',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  profile: {\n    title: 'Profile',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  settings: {\n    title: 'Settings',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  support: {\n    title: 'Support',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  deposit: {\n    title: 'Deposit',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  transfer: {\n    title: 'Pay & Transfer',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  // register\n  register: {\n    title: 'Register',\n  },\n  // forgot password\n  'send-code': {\n    title: 'Forgot Password',\n  },\n  'terms-conditions': {\n    title: 'Terms & Conditions',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  'privay-policy': {\n    title: 'privay-policy',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  'complaints-procedures': {\n    title: 'complaints-procedures',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n\n  'code-sent': {\n    title: 'Check your inbox',\n  },\n  'enter-code': {\n    title: 'Enter Code',\n  },\n  reset: {\n    title: 'Reset Password',\n  },\n}"
            },
            {
                "name": "slideInAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/animation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('routeAnimations', [\n  transition('* <=> *', [\n    style({ position: 'relative' }),\n    query(\n      ':enter, :leave',\n      [\n        style({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n        }),\n      ],\n      { optional: true }\n    ),\n    query(':enter', [style({ left: '100%' })], { optional: true }),\n    group([\n      query(':leave', [animate('300ms ease-out', style({ left: '-100%' }))], {\n        optional: true,\n      }),\n      query(':enter', [animate('300ms ease-out', style({ left: '0%' }))], {\n        optional: true,\n      }),\n    ]),\n  ]),\n])"
            },
            {
                "name": "systemConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/configs/system.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  loginUrl: '/login',\n  unauthorizedRedirectTo: '/welcome',\n  authStorageType: 'local',\n  authServiceKey: 'authServiceKey',\n  siteTitle: 'Financial House',\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Permission",
                "childs": [
                    {
                        "name": "APP_ACCESS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "APP_ACCESS"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/enum/index.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideRouter(routes),\n    provideHttpClient(withInterceptors([authInterceptor])),\n    BsModalService,\n  ],\n}"
                }
            ],
            "src/app/core/interceptors/auth.interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\n  const excludedUrls: string[] = [];\n\n  if (!excludedUrls.includes(req.url)) {\n    const headers = {\n      'Client-Date': new Date().getTime().toString(),\n    };\n\n    console.log('AuthInterceptor', headers);\n    req = req.clone({ setHeaders: headers });\n  }\n\n  return next(req);\n}"
                }
            ],
            "src/app/shared/services/auth.service.ts": [
                {
                    "name": "authServiceKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/auth.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "systemConfig.authServiceKey || 'auth'"
                }
            ],
            "src/app/utils/countries.ts": [
                {
                    "name": "Countries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/countries.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'Afghanistan',\n    flag: '🇦🇫',\n    code: 'AF',\n    dial_code: '+93',\n    languages: {\n      en: 'Afghanistan',\n      tr: 'Afganistan',\n    },\n  },\n  {\n    name: 'Åland Islands',\n    flag: '🇦🇽',\n    code: 'AX',\n    dial_code: '+358',\n    languages: {\n      en: 'Åland Islands',\n      tr: 'Åland Adaları',\n    },\n  },\n  {\n    name: 'Albania',\n    flag: '🇦🇱',\n    code: 'AL',\n    dial_code: '+355',\n    languages: {\n      en: 'Albania',\n      tr: 'Arnavutluk',\n    },\n  },\n  {\n    name: 'Algeria',\n    flag: '🇩🇿',\n    code: 'DZ',\n    dial_code: '+213',\n    languages: {\n      en: 'Algeria',\n      tr: 'Cezayir',\n    },\n  },\n  {\n    name: 'American Samoa',\n    flag: '🇦🇸',\n    code: 'AS',\n    dial_code: '+1684',\n    languages: {\n      en: 'American Samoa',\n      tr: 'Amerikan Samoası',\n    },\n  },\n  {\n    name: 'Andorra',\n    flag: '🇦🇩',\n    code: 'AD',\n    dial_code: '+376',\n    languages: {\n      en: 'Andorra',\n      tr: 'Andorra',\n    },\n  },\n  {\n    name: 'Angola',\n    flag: '🇦🇴',\n    code: 'AO',\n    dial_code: '+244',\n    languages: {\n      en: 'Angola',\n      tr: 'Angola',\n    },\n  },\n  {\n    name: 'Anguilla',\n    flag: '🇦🇮',\n    code: 'AI',\n    dial_code: '+1264',\n    languages: {\n      en: 'Anguilla',\n      tr: 'Anguilla',\n    },\n  },\n  {\n    name: 'Antarctica',\n    flag: '🇦🇶',\n    code: 'AQ',\n    dial_code: '+672',\n    languages: {\n      en: 'Antarctica',\n      tr: 'Antarktika',\n    },\n  },\n  {\n    name: 'Antigua and Barbuda',\n    flag: '🇦🇬',\n    code: 'AG',\n    dial_code: '+1268',\n    languages: {\n      en: 'Antigua and Barbuda',\n      tr: 'Antigua ve Barbuda',\n    },\n  },\n  {\n    name: 'Argentina',\n    flag: '🇦🇷',\n    code: 'AR',\n    dial_code: '+54',\n    languages: {\n      en: 'Argentina',\n      tr: 'Arjantin',\n    },\n  },\n  {\n    name: 'Armenia',\n    flag: '🇦🇲',\n    code: 'AM',\n    dial_code: '+374',\n    languages: {\n      en: 'Armenia',\n      tr: 'Ermenistan',\n    },\n  },\n  {\n    name: 'Aruba',\n    flag: '🇦🇼',\n    code: 'AW',\n    dial_code: '+297',\n    languages: {\n      en: 'Aruba',\n      tr: 'Aruba',\n    },\n  },\n  {\n    name: 'Australia',\n    flag: '🇦🇺',\n    code: 'AU',\n    dial_code: '+61',\n    languages: {\n      en: 'Australia',\n      tr: 'Avustralya',\n    },\n  },\n  {\n    name: 'Austria',\n    flag: '🇦🇹',\n    code: 'AT',\n    dial_code: '+43',\n    languages: {\n      en: 'Austria',\n      tr: 'Avusturya',\n    },\n  },\n  {\n    name: 'Azerbaijan',\n    flag: '🇦🇿',\n    code: 'AZ',\n    dial_code: '+994',\n    languages: {\n      en: 'Azerbaijan',\n      tr: 'Azerbaycan',\n    },\n  },\n  {\n    name: 'Bahamas',\n    flag: '🇧🇸',\n    code: 'BS',\n    dial_code: '+1242',\n    languages: {\n      en: 'Bahamas',\n      tr: 'Bahamalar',\n    },\n  },\n  {\n    name: 'Bahrain',\n    flag: '🇧🇭',\n    code: 'BH',\n    dial_code: '+973',\n    languages: {\n      en: 'Bahrain',\n      tr: 'Bahreyn',\n    },\n  },\n  {\n    name: 'Bangladesh',\n    flag: '🇧🇩',\n    code: 'BD',\n    dial_code: '+880',\n    languages: {\n      en: 'Bangladesh',\n      tr: 'Bangladeş',\n    },\n  },\n  {\n    name: 'Barbados',\n    flag: '🇧🇧',\n    code: 'BB',\n    dial_code: '+1246',\n    languages: {\n      en: 'Barbados',\n      tr: 'Barbados',\n    },\n  },\n  {\n    name: 'Belarus',\n    flag: '🇧🇾',\n    code: 'BY',\n    dial_code: '+375',\n    languages: {\n      en: 'Belarus',\n      tr: 'Belarus',\n    },\n  },\n  {\n    name: 'Belgium',\n    flag: '🇧🇪',\n    code: 'BE',\n    dial_code: '+32',\n    languages: {\n      en: 'Belgium',\n      tr: 'Belçika',\n    },\n  },\n  {\n    name: 'Belize',\n    flag: '🇧🇿',\n    code: 'BZ',\n    dial_code: '+501',\n    languages: {\n      en: 'Belize',\n      tr: 'Belize',\n    },\n  },\n  {\n    name: 'Benin',\n    flag: '🇧🇯',\n    code: 'BJ',\n    dial_code: '+229',\n    languages: {\n      en: 'Benin',\n      tr: 'Benin',\n    },\n  },\n  {\n    name: 'Bermuda',\n    flag: '🇧🇲',\n    code: 'BM',\n    dial_code: '+1441',\n    languages: {\n      en: 'Bermuda',\n      tr: 'Bermuda',\n    },\n  },\n  {\n    name: 'Bhutan',\n    flag: '🇧🇹',\n    code: 'BT',\n    dial_code: '+975',\n    languages: {\n      en: 'Bhutan',\n      tr: 'Butan',\n    },\n  },\n  {\n    name: 'Bolivia, Plurinational State of bolivia',\n    flag: '🇧🇴',\n    code: 'BO',\n    dial_code: '+591',\n    languages: {\n      en: 'Bolivia, Plurinational State of bolivia',\n      tr: 'Bolivya, Bolivya Çokuluslu Devleti',\n    },\n  },\n  {\n    name: 'Bosnia and Herzegovina',\n    flag: '🇧🇦',\n    code: 'BA',\n    dial_code: '+387',\n    languages: {\n      en: 'Bosnia and Herzegovina',\n      tr: 'Bosna Hersek',\n    },\n  },\n  {\n    name: 'Botswana',\n    flag: '🇧🇼',\n    code: 'BW',\n    dial_code: '+267',\n    languages: {\n      en: 'Botswana',\n      tr: 'Botsvana',\n    },\n  },\n  {\n    name: 'Bouvet Island',\n    flag: '🇧🇻',\n    code: 'BV',\n    dial_code: '+47',\n    languages: {\n      en: 'Bouvet Island',\n      tr: 'Bouvet Adası',\n    },\n  },\n  {\n    name: 'Brazil',\n    flag: '🇧🇷',\n    code: 'BR',\n    dial_code: '+55',\n    languages: {\n      en: 'Brazil',\n      tr: 'Brezilya',\n    },\n  },\n  {\n    name: 'British Indian Ocean Territory',\n    flag: '🇮🇴',\n    code: 'IO',\n    dial_code: '+246',\n    languages: {\n      en: 'British Indian Ocean Territory',\n      tr: 'Britanya Hint Okyanusu Toprakları',\n    },\n  },\n  {\n    name: 'Brunei Darussalam',\n    flag: '🇧🇳',\n    code: 'BN',\n    dial_code: '+673',\n    languages: {\n      en: 'Brunei Darussalam',\n      tr: 'Brunei Darusselam',\n    },\n  },\n  {\n    name: 'Bulgaria',\n    flag: '🇧🇬',\n    code: 'BG',\n    dial_code: '+359',\n    languages: {\n      en: 'Bulgaria',\n      tr: 'Bulgaristan',\n    },\n  },\n  {\n    name: 'Burkina Faso',\n    flag: '🇧🇫',\n    code: 'BF',\n    dial_code: '+226',\n    languages: {\n      en: 'Burkina Faso',\n      tr: 'Burkina Faso',\n    },\n  },\n  {\n    name: 'Burundi',\n    flag: '🇧🇮',\n    code: 'BI',\n    dial_code: '+257',\n    languages: {\n      en: 'Burundi',\n      tr: 'Burundi',\n    },\n  },\n  {\n    name: 'Cambodia',\n    flag: '🇰🇭',\n    code: 'KH',\n    dial_code: '+855',\n    languages: {\n      en: 'Cambodia',\n      tr: 'Kamboçya',\n    },\n  },\n  {\n    name: 'Cameroon',\n    flag: '🇨🇲',\n    code: 'CM',\n    dial_code: '+237',\n    languages: {\n      en: 'Cameroon',\n      tr: 'Kamerun',\n    },\n  },\n  {\n    name: 'Canada',\n    flag: '🇨🇦',\n    code: 'CA',\n    dial_code: '+1',\n    languages: {\n      en: 'Canada',\n      tr: 'Kanada',\n    },\n  },\n  {\n    name: 'Cape Verde',\n    flag: '🇨🇻',\n    code: 'CV',\n    dial_code: '+238',\n    languages: {\n      en: 'Cape Verde',\n      tr: 'Yeşil Burun Adaları',\n    },\n  },\n  {\n    name: 'Cayman Islands',\n    flag: '🇰🇾',\n    code: 'KY',\n    dial_code: '+345',\n    languages: {\n      en: 'Cayman Islands',\n      tr: 'Kayman Adaları',\n    },\n  },\n  {\n    name: 'Central African Republic',\n    flag: '🇨🇫',\n    code: 'CF',\n    dial_code: '+236',\n    languages: {\n      en: 'Central African Republic',\n      tr: 'Orta Afrika Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Chad',\n    flag: '🇹🇩',\n    code: 'TD',\n    dial_code: '+235',\n    languages: {\n      en: 'Chad',\n      tr: 'Çad',\n    },\n  },\n  {\n    name: 'Chile',\n    flag: '🇨🇱',\n    code: 'CL',\n    dial_code: '+56',\n    languages: {\n      en: 'Chile',\n      tr: 'Şili',\n    },\n  },\n  {\n    name: 'China',\n    flag: '🇨🇳',\n    code: 'CN',\n    dial_code: '+86',\n    languages: {\n      en: 'China',\n      tr: 'Çin',\n    },\n  },\n  {\n    name: 'Christmas Island',\n    flag: '🇨🇽',\n    code: 'CX',\n    dial_code: '+61',\n    languages: {\n      en: 'Christmas Island',\n      tr: 'Christmas Adası',\n    },\n  },\n  {\n    name: 'Cocos (Keeling) Islands',\n    flag: '🇨🇨',\n    code: 'CC',\n    dial_code: '+61',\n    languages: {\n      en: 'Cocos (Keeling) Islands',\n      tr: 'Cocos (Keeling) Adaları',\n    },\n  },\n  {\n    name: 'Colombia',\n    flag: '🇨🇴',\n    code: 'CO',\n    dial_code: '+57',\n    languages: {\n      en: 'Colombia',\n      tr: 'Kolombiya',\n    },\n  },\n  {\n    name: 'Comoros',\n    flag: '🇰🇲',\n    code: 'KM',\n    dial_code: '+269',\n    languages: {\n      en: 'Comoros',\n      tr: 'Komorlar',\n    },\n  },\n  {\n    name: 'Congo',\n    flag: '🇨🇬',\n    code: 'CG',\n    dial_code: '+242',\n    languages: {\n      en: 'Congo',\n      tr: 'Kongo',\n    },\n  },\n  {\n    name: 'Congo, The Democratic Republic of the Congo',\n    flag: '🇨🇩',\n    code: 'CD',\n    dial_code: '+243',\n    languages: {\n      en: 'Congo, The Democratic Republic of the Congo',\n      tr: 'Kongo, Demokratik Kongo Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Cook Islands',\n    flag: '🇨🇰',\n    code: 'CK',\n    dial_code: '+682',\n    languages: {\n      en: 'Cook Islands',\n      tr: 'Cook Adaları',\n    },\n  },\n  {\n    name: 'Costa Rica',\n    flag: '🇨🇷',\n    code: 'CR',\n    dial_code: '+506',\n    languages: {\n      en: 'Costa Rica',\n      tr: 'Kosta Rika',\n    },\n  },\n  {\n    name: \"Cote d'Ivoire\",\n    flag: '🇨🇮',\n    code: 'CI',\n    dial_code: '+225',\n    languages: {\n      en: \"Cote d'Ivoire\",\n      tr: 'Fildişi Sahili',\n    },\n  },\n  {\n    name: 'Croatia',\n    flag: '🇭🇷',\n    code: 'HR',\n    dial_code: '+385',\n    languages: {\n      en: 'Croatia',\n      tr: 'Hırvatistan',\n    },\n  },\n  {\n    name: 'Cuba',\n    flag: '🇨🇺',\n    code: 'CU',\n    dial_code: '+53',\n    languages: {\n      en: 'Cuba',\n      tr: 'Küba',\n    },\n  },\n  {\n    name: 'Curaçao',\n    flag: '🇨🇼',\n    code: 'CW',\n    dial_code: '+599',\n    languages: {\n      en: 'Curaçao',\n      tr: 'Küba, Kıbrıs',\n    },\n  },\n  {\n    name: 'Cyprus',\n    flag: '🇨🇾',\n    code: 'CY',\n    dial_code: '+357',\n    languages: {\n      en: 'Cyprus',\n      tr: 'Kıbrıs',\n    },\n  },\n  {\n    name: 'Czech Republic',\n    flag: '🇨🇿',\n    code: 'CZ',\n    dial_code: '+420',\n    languages: {\n      en: 'Czech Republic',\n      tr: 'Çek Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Denmark',\n    flag: '🇩🇰',\n    code: 'DK',\n    dial_code: '+45',\n    languages: {\n      en: 'Denmark',\n      tr: 'Danimarka',\n    },\n  },\n  {\n    name: 'Djibouti',\n    flag: '🇩🇯',\n    code: 'DJ',\n    dial_code: '+253',\n    languages: {\n      en: 'Djibouti',\n      tr: 'Cibuti',\n    },\n  },\n  {\n    name: 'Dominica',\n    flag: '🇩🇲',\n    code: 'DM',\n    dial_code: '+1767',\n    languages: {\n      en: 'Dominica',\n      tr: 'Dominika',\n    },\n  },\n  {\n    name: 'Dominican Republic',\n    flag: '🇩🇴',\n    code: 'DO',\n    dial_code: '+1849',\n    languages: {\n      en: 'Dominican Republic',\n      tr: 'Dominik Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Ecuador',\n    flag: '🇪🇨',\n    code: 'EC',\n    dial_code: '+593',\n    languages: {\n      en: 'Ecuador',\n      tr: 'Ekvador',\n    },\n  },\n  {\n    name: 'Egypt',\n    flag: '🇪🇬',\n    code: 'EG',\n    dial_code: '+20',\n    languages: {\n      en: 'Egypt',\n      tr: 'Mısır',\n    },\n  },\n  {\n    name: 'El Salvador',\n    flag: '🇸🇻',\n    code: 'SV',\n    dial_code: '+503',\n    languages: {\n      en: 'El Salvador',\n      tr: 'El Salvador',\n    },\n  },\n  {\n    name: 'Equatorial Guinea',\n    flag: '🇬🇶',\n    code: 'GQ',\n    dial_code: '+240',\n    languages: {\n      en: 'Equatorial Guinea',\n      tr: 'Ekvator Ginesi',\n    },\n  },\n  {\n    name: 'Eritrea',\n    flag: '🇪🇷',\n    code: 'ER',\n    dial_code: '+291',\n    languages: {\n      en: 'Eritrea',\n      tr: 'Eritre',\n    },\n  },\n  {\n    name: 'Estonia',\n    flag: '🇪🇪',\n    code: 'EE',\n    dial_code: '+372',\n    languages: {\n      en: 'Estonia',\n      tr: 'Estonya',\n    },\n  },\n  {\n    name: 'Ethiopia',\n    flag: '🇪🇹',\n    code: 'ET',\n    dial_code: '+251',\n    languages: {\n      en: 'Ethiopia',\n      tr: 'Etiyopya',\n    },\n  },\n  {\n    name: 'Falkland Islands (Malvinas)',\n    flag: '🇫🇰',\n    code: 'FK',\n    dial_code: '+500',\n    languages: {\n      en: 'Falkland Islands (Malvinas)',\n      tr: 'Falkland Adaları (Malvinas)',\n    },\n  },\n  {\n    name: 'Faroe Islands',\n    flag: '🇫🇴',\n    code: 'FO',\n    dial_code: '+298',\n    languages: {\n      en: 'Faroe Islands',\n      tr: 'Faroe Adaları',\n    },\n  },\n  {\n    name: 'Fiji',\n    flag: '🇫🇯',\n    code: 'FJ',\n    dial_code: '+679',\n    languages: {\n      en: 'Fiji',\n      tr: 'Fiji',\n    },\n  },\n  {\n    name: 'Finland',\n    flag: '🇫🇮',\n    code: 'FI',\n    dial_code: '+358',\n    languages: {\n      en: 'Finland',\n      tr: 'Finlandiya',\n    },\n  },\n  {\n    name: 'France',\n    flag: '🇫🇷',\n    code: 'FR',\n    dial_code: '+33',\n    languages: {\n      en: 'France',\n      tr: 'Fransa',\n    },\n  },\n  {\n    name: 'French Guiana',\n    flag: '🇬🇫',\n    code: 'GF',\n    dial_code: '+594',\n    languages: {\n      en: 'French Guiana',\n      tr: 'Fransız Guyanası',\n    },\n  },\n  {\n    name: 'French Polynesia',\n    flag: '🇵🇫',\n    code: 'PF',\n    dial_code: '+689',\n    languages: {\n      en: 'French Polynesia',\n      tr: 'Fransız Polinezyası',\n    },\n  },\n  {\n    name: 'French Southern Territories',\n    flag: '🇹🇫',\n    code: 'TF',\n    dial_code: '+262',\n    languages: {\n      en: 'French Southern Territories',\n      tr: 'Fransız Güney Toprakları',\n    },\n  },\n  {\n    name: 'Gabon',\n    flag: '🇬🇦',\n    code: 'GA',\n    dial_code: '+241',\n    languages: {\n      en: 'Gabon',\n      tr: 'Gabon',\n    },\n  },\n  {\n    name: 'Gambia',\n    flag: '🇬🇲',\n    code: 'GM',\n    dial_code: '+220',\n    languages: {\n      en: 'Gambia',\n      tr: 'Gambiya',\n    },\n  },\n  {\n    name: 'Georgia',\n    flag: '🇬🇪',\n    code: 'GE',\n    dial_code: '+995',\n    languages: {\n      en: 'Georgia',\n      tr: 'Gürcistan',\n    },\n  },\n  {\n    name: 'Germany',\n    flag: '🇩🇪',\n    code: 'DE',\n    dial_code: '+49',\n    languages: {\n      en: 'Germany',\n      tr: 'Almanya',\n    },\n  },\n  {\n    name: 'Ghana',\n    flag: '🇬🇭',\n    code: 'GH',\n    dial_code: '+233',\n    languages: {\n      en: 'Ghana',\n      tr: 'Gana',\n    },\n  },\n  {\n    name: 'Gibraltar',\n    flag: '🇬🇮',\n    code: 'GI',\n    dial_code: '+350',\n    languages: {\n      en: 'Gibraltar',\n      tr: 'Cebelitarık',\n    },\n  },\n  {\n    name: 'Greece',\n    flag: '🇬🇷',\n    code: 'GR',\n    dial_code: '+30',\n    languages: {\n      en: 'Greece',\n      tr: 'Yunanistan',\n    },\n  },\n  {\n    name: 'Greenland',\n    flag: '🇬🇱',\n    code: 'GL',\n    dial_code: '+299',\n    languages: {\n      en: 'Greenland',\n      tr: 'Grönland',\n    },\n  },\n  {\n    name: 'Grenada',\n    flag: '🇬🇩',\n    code: 'GD',\n    dial_code: '+1473',\n    languages: {\n      en: 'Grenada',\n      tr: 'Grenada',\n    },\n  },\n  {\n    name: 'Guadeloupe',\n    flag: '🇬🇵',\n    code: 'GP',\n    dial_code: '+590',\n    languages: {\n      en: 'Guadeloupe',\n      tr: 'Guadeloupe',\n    },\n  },\n  {\n    name: 'Guam',\n    flag: '🇬🇺',\n    code: 'GU',\n    dial_code: '+1671',\n    languages: {\n      en: 'Guam',\n      tr: 'Guam',\n    },\n  },\n  {\n    name: 'Guatemala',\n    flag: '🇬🇹',\n    code: 'GT',\n    dial_code: '+502',\n    languages: {\n      en: 'Guatemala',\n      tr: 'Guatemala',\n    },\n  },\n  {\n    name: 'Guernsey',\n    flag: '🇬🇬',\n    code: 'GG',\n    dial_code: '+44',\n    languages: {\n      en: 'Guernsey',\n      tr: 'Guernsey',\n    },\n  },\n  {\n    name: 'Guinea',\n    flag: '🇬🇳',\n    code: 'GN',\n    dial_code: '+224',\n    languages: {\n      en: 'Guinea',\n      tr: 'Gine',\n    },\n  },\n  {\n    name: 'Guinea-Bissau',\n    flag: '🇬🇼',\n    code: 'GW',\n    dial_code: '+245',\n    languages: {\n      en: 'Guinea-Bissau',\n      tr: 'Gine-Bissau',\n    },\n  },\n  {\n    name: 'Guyana',\n    flag: '🇬🇾',\n    code: 'GY',\n    dial_code: '+592',\n    languages: {\n      en: 'Guyana',\n      tr: 'Guyana',\n    },\n  },\n  {\n    name: 'Haiti',\n    flag: '🇭🇹',\n    code: 'HT',\n    dial_code: '+509',\n    languages: {\n      en: 'Haiti',\n      tr: 'Haiti',\n    },\n  },\n  {\n    name: 'Heard Island and McDonald Islands',\n    flag: '🇭🇲',\n    code: 'HM',\n    dial_code: '+672',\n    languages: {\n      en: 'Heard Island and McDonald Islands',\n      tr: 'Heard Adası ve McDonald Adaları',\n    },\n  },\n  {\n    name: 'Holy See (Vatican City State)',\n    flag: '🇻🇦',\n    code: 'VA',\n    dial_code: '+379',\n    languages: {\n      en: 'Holy See (Vatican City State)',\n      tr: 'Vatikan Şehri Devleti',\n    },\n  },\n  {\n    name: 'Honduras',\n    flag: '🇭🇳',\n    code: 'HN',\n    dial_code: '+504',\n    languages: {\n      en: 'Honduras',\n      tr: 'Honduras',\n    },\n  },\n  {\n    name: 'Hong Kong',\n    flag: '🇭🇰',\n    code: 'HK',\n    dial_code: '+852',\n    languages: {\n      en: 'Hong Kong',\n      tr: 'Hong Kong',\n    },\n  },\n  {\n    name: 'Hungary',\n    flag: '🇭🇺',\n    code: 'HU',\n    dial_code: '+36',\n    languages: {\n      en: 'Hungary',\n      tr: 'Macaristan',\n    },\n  },\n  {\n    name: 'Iceland',\n    flag: '🇮🇸',\n    code: 'IS',\n    dial_code: '+354',\n    languages: {\n      en: 'Iceland',\n      tr: 'İzlanda',\n    },\n  },\n  {\n    name: 'India',\n    flag: '🇮🇳',\n    code: 'IN',\n    dial_code: '+91',\n    languages: {\n      en: 'India',\n      tr: 'Hindistan',\n    },\n  },\n  {\n    name: 'Indonesia',\n    flag: '🇮🇩',\n    code: 'ID',\n    dial_code: '+62',\n    languages: {\n      en: 'Indonesia',\n      tr: 'Endonezya',\n    },\n  },\n  {\n    name: 'Iran, Islamic Republic of Persian Gulf',\n    flag: '🇮🇷',\n    code: 'IR',\n    dial_code: '+98',\n    languages: {\n      en: 'Iran, Islamic Republic of Persian Gulf',\n      tr: 'İran, İslam Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Iraq',\n    flag: '🇮🇶',\n    code: 'IQ',\n    dial_code: '+964',\n    languages: {\n      en: 'Iraq',\n      tr: 'Irak',\n    },\n  },\n  {\n    name: 'Ireland',\n    flag: '🇮🇪',\n    code: 'IE',\n    dial_code: '+353',\n    languages: {\n      en: 'Ireland',\n      tr: 'İrlanda',\n    },\n  },\n  {\n    name: 'Isle of Man',\n    flag: '🇮🇲',\n    code: 'IM',\n    dial_code: '+44',\n    languages: {\n      en: 'Isle of Man',\n      tr: 'Man Adası',\n    },\n  },\n  {\n    name: 'Israel',\n    flag: '🇮🇱',\n    code: 'IL',\n    dial_code: '+972',\n    languages: {\n      en: 'Israel',\n      tr: 'İsrail',\n    },\n  },\n  {\n    name: 'Italy',\n    flag: '🇮🇹',\n    code: 'IT',\n    dial_code: '+39',\n    languages: {\n      en: 'Italy',\n      tr: 'İtalya',\n    },\n  },\n  {\n    name: 'Jamaica',\n    flag: '🇯🇲',\n    code: 'JM',\n    dial_code: '+1876',\n    languages: {\n      en: 'Jamaica',\n      tr: 'Jamaika',\n    },\n  },\n  {\n    name: 'Japan',\n    flag: '🇯🇵',\n    code: 'JP',\n    dial_code: '+81',\n    languages: {\n      en: 'Japan',\n      tr: 'Japonya',\n    },\n  },\n  {\n    name: 'Jersey',\n    flag: '🇯🇪',\n    code: 'JE',\n    dial_code: '+44',\n    languages: {\n      en: 'Jersey',\n      tr: 'Jersey',\n    },\n  },\n  {\n    name: 'Jordan',\n    flag: '🇯🇴',\n    code: 'JO',\n    dial_code: '+962',\n    languages: {\n      en: 'Jordan',\n      tr: 'Ürdün',\n    },\n  },\n  {\n    name: 'Kazakhstan',\n    flag: '🇰🇿',\n    code: 'KZ',\n    dial_code: '+7',\n    languages: {\n      en: 'Kazakhstan',\n      tr: 'Kazakistan',\n    },\n  },\n  {\n    name: 'Kenya',\n    flag: '🇰🇪',\n    code: 'KE',\n    dial_code: '+254',\n    languages: {\n      en: 'Kenya',\n      tr: 'Kenya',\n    },\n  },\n  {\n    name: 'Kiribati',\n    flag: '🇰🇮',\n    code: 'KI',\n    dial_code: '+686',\n    languages: {\n      en: 'Kiribati',\n      tr: 'Kiribati',\n    },\n  },\n  {\n    name: \"Korea, Democratic People's Republic of Korea\",\n    flag: '🇰🇵',\n    code: 'KP',\n    dial_code: '+850',\n    languages: {\n      en: \"Korea, Democratic People's Republic of Korea\",\n      tr: 'Kore Demokratik Halk Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Korea, Republic of South Korea',\n    flag: '🇰🇷',\n    code: 'KR',\n    dial_code: '+82',\n    languages: {\n      en: 'Korea, Republic of South Korea',\n      tr: 'Kore Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Kuwait',\n    flag: '🇰🇼',\n    code: 'KW',\n    dial_code: '+965',\n    languages: {\n      en: 'Kuwait',\n      tr: 'Kuveyt',\n    },\n  },\n  {\n    name: 'Kyrgyzstan',\n    flag: '🇰🇬',\n    code: 'KG',\n    dial_code: '+996',\n    languages: {\n      en: 'Kyrgyzstan',\n      tr: 'Kırgızistan',\n    },\n  },\n  {\n    name: 'Laos',\n    flag: '🇱🇦',\n    code: 'LA',\n    dial_code: '+856',\n    languages: {\n      en: 'Laos',\n      tr: 'Lao, Demokratik Halk Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Latvia',\n    flag: '🇱🇻',\n    code: 'LV',\n    dial_code: '+371',\n    languages: {\n      en: 'Latvia',\n      tr: 'Letonya',\n    },\n  },\n  {\n    name: 'Lebanon',\n    flag: '🇱🇧',\n    code: 'LB',\n    dial_code: '+961',\n    languages: {\n      en: 'Lebanon',\n      tr: 'Lübnan',\n    },\n  },\n  {\n    name: 'Lesotho',\n    flag: '🇱🇸',\n    code: 'LS',\n    dial_code: '+266',\n    languages: {\n      en: 'Lesotho',\n      tr: 'Lesoto',\n    },\n  },\n  {\n    name: 'Liberia',\n    flag: '🇱🇷',\n    code: 'LR',\n    dial_code: '+231',\n    languages: {\n      en: 'Liberia',\n      tr: 'Liberya',\n    },\n  },\n  {\n    name: 'Libyan Arab Jamahiriya',\n    flag: '🇱🇾',\n    code: 'LY',\n    dial_code: '+218',\n    languages: {\n      en: 'Libyan Arab Jamahiriya',\n      tr: 'Libya',\n    },\n  },\n  {\n    name: 'Liechtenstein',\n    flag: '🇱🇮',\n    code: 'LI',\n    dial_code: '+423',\n    languages: {\n      en: 'Liechtenstein',\n      tr: 'Liechtenstein',\n    },\n  },\n  {\n    name: 'Lithuania',\n    flag: '🇱🇹',\n    code: 'LT',\n    dial_code: '+370',\n    languages: {\n      en: 'Lithuania',\n      tr: 'Litvanya',\n    },\n  },\n  {\n    name: 'Luxembourg',\n    flag: '🇱🇺',\n    code: 'LU',\n    dial_code: '+352',\n    languages: {\n      en: 'Luxembourg',\n      tr: 'Lüksemburg',\n    },\n  },\n  {\n    name: 'Macao',\n    flag: '🇲🇴',\n    code: 'MO',\n    dial_code: '+853',\n    languages: {\n      en: 'Macao',\n      tr: 'Makao',\n    },\n  },\n  {\n    name: 'Macedonia',\n    flag: '🇲🇰',\n    code: 'MK',\n    dial_code: '+389',\n    languages: {\n      en: 'Macedonia',\n      tr: 'Makedonya, Eski Yugoslav Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Madagascar',\n    flag: '🇲🇬',\n    code: 'MG',\n    dial_code: '+261',\n    languages: {\n      en: 'Madagascar',\n      tr: 'Madagaskar',\n    },\n  },\n  {\n    name: 'Malawi',\n    flag: '🇲🇼',\n    code: 'MW',\n    dial_code: '+265',\n    languages: {\n      en: 'Malawi',\n      tr: 'Malavi',\n    },\n  },\n  {\n    name: 'Malaysia',\n    flag: '🇲🇾',\n    code: 'MY',\n    dial_code: '+60',\n    languages: {\n      en: 'Malaysia',\n      tr: 'Malezya',\n    },\n  },\n  {\n    name: 'Maldives',\n    flag: '🇲🇻',\n    code: 'MV',\n    dial_code: '+960',\n    languages: {\n      en: 'Maldives',\n      tr: 'Maldivler',\n    },\n  },\n  {\n    name: 'Mali',\n    flag: '🇲🇱',\n    code: 'ML',\n    dial_code: '+223',\n    languages: {\n      en: 'Mali',\n      tr: 'Mali',\n    },\n  },\n  {\n    name: 'Malta',\n    flag: '🇲🇹',\n    code: 'MT',\n    dial_code: '+356',\n    languages: {\n      en: 'Malta',\n      tr: 'Malta',\n    },\n  },\n  {\n    name: 'Marshall Islands',\n    flag: '🇲🇭',\n    code: 'MH',\n    dial_code: '+692',\n    languages: {\n      en: 'Marshall Islands',\n      tr: 'Marshall Adaları',\n    },\n  },\n  {\n    name: 'Martinique',\n    flag: '🇲🇶',\n    code: 'MQ',\n    dial_code: '+596',\n    languages: {\n      en: 'Martinique',\n      tr: 'Martinik',\n    },\n  },\n  {\n    name: 'Mauritania',\n    flag: '🇲🇷',\n    code: 'MR',\n    dial_code: '+222',\n    languages: {\n      en: 'Mauritania',\n      tr: 'Moritanya',\n    },\n  },\n  {\n    name: 'Mauritius',\n    flag: '🇲🇺',\n    code: 'MU',\n    dial_code: '+230',\n    languages: {\n      en: 'Mauritius',\n      tr: 'Mauritius',\n    },\n  },\n  {\n    name: 'Mayotte',\n    flag: '🇾🇹',\n    code: 'YT',\n    dial_code: '+262',\n    languages: {\n      en: 'Mayotte',\n      tr: 'Mayotte',\n    },\n  },\n  {\n    name: 'Mexico',\n    flag: '🇲🇽',\n    code: 'MX',\n    dial_code: '+52',\n    languages: {\n      en: 'Mexico',\n      tr: 'Meksika',\n    },\n  },\n  {\n    name: 'Micronesia, Federated States of Micronesia',\n    flag: '🇫🇲',\n    code: 'FM',\n    dial_code: '+691',\n    languages: {\n      en: 'Micronesia, Federated States of Micronesia',\n      tr: 'Mikronezya, Federe Devletleri',\n    },\n  },\n  {\n    name: 'Moldova',\n    flag: '🇲🇩',\n    code: 'MD',\n    dial_code: '+373',\n    languages: {\n      en: 'Moldova',\n      tr: 'Moldova',\n    },\n  },\n  {\n    name: 'Monaco',\n    flag: '🇲🇨',\n    code: 'MC',\n    dial_code: '+377',\n    languages: {\n      en: 'Monaco',\n      tr: 'Monako',\n    },\n  },\n  {\n    name: 'Mongolia',\n    flag: '🇲🇳',\n    code: 'MN',\n    dial_code: '+976',\n    languages: {\n      en: 'Mongolia',\n      tr: 'Moğolistan',\n    },\n  },\n  {\n    name: 'Montenegro',\n    flag: '🇲🇪',\n    code: 'ME',\n    dial_code: '+382',\n    languages: {\n      en: 'Montenegro',\n      tr: 'Karadağ',\n    },\n  },\n  {\n    name: 'Montserrat',\n    flag: '🇲🇸',\n    code: 'MS',\n    dial_code: '+1664',\n    languages: {\n      en: 'Montserrat',\n      tr: 'Montserrat',\n    },\n  },\n  {\n    name: 'Morocco',\n    flag: '🇲🇦',\n    code: 'MA',\n    dial_code: '+212',\n    languages: {\n      en: 'Morocco',\n      tr: 'Fas',\n    },\n  },\n  {\n    name: 'Mozambique',\n    flag: '🇲🇿',\n    code: 'MZ',\n    dial_code: '+258',\n    languages: {\n      en: 'Mozambique',\n      tr: 'Mozambik',\n    },\n  },\n  {\n    name: 'Myanmar',\n    flag: '🇲🇲',\n    code: 'MM',\n    dial_code: '+95',\n    languages: {\n      en: 'Myanmar',\n      tr: 'Myanmar',\n    },\n  },\n  {\n    name: 'Namibia',\n    flag: '🇳🇦',\n    code: 'NA',\n    dial_code: '+264',\n    languages: {\n      en: 'Namibia',\n      tr: 'Namibya',\n    },\n  },\n  {\n    name: 'Nauru',\n    flag: '🇳🇷',\n    code: 'NR',\n    dial_code: '+674',\n    languages: {\n      en: 'Nauru',\n      tr: 'Nauru',\n    },\n  },\n  {\n    name: 'Nepal',\n    flag: '🇳🇵',\n    code: 'NP',\n    dial_code: '+977',\n    languages: {\n      en: 'Nepal',\n      tr: 'Nepal',\n    },\n  },\n  {\n    name: 'Netherlands',\n    flag: '🇳🇱',\n    code: 'NL',\n    dial_code: '+31',\n    languages: {\n      en: 'Netherlands',\n      tr: 'Hollanda',\n    },\n  },\n  {\n    name: 'Netherlands Antilles',\n    flag: '🇦🇳',\n    code: 'AN',\n    dial_code: '+599',\n    languages: {\n      en: 'Netherlands Antilles',\n      tr: 'Hollanda Antilleri',\n    },\n  },\n  {\n    name: 'New Caledonia',\n    flag: '🇳🇨',\n    code: 'NC',\n    dial_code: '+687',\n    languages: {\n      en: 'New Caledonia',\n      tr: 'Yeni Kaledonya',\n    },\n  },\n  {\n    name: 'New Zealand',\n    flag: '🇳🇿',\n    code: 'NZ',\n    dial_code: '+64',\n    languages: {\n      en: 'New Zealand',\n      tr: 'Yeni Zelanda',\n    },\n  },\n  {\n    name: 'Nicaragua',\n    flag: '🇳🇮',\n    code: 'NI',\n    dial_code: '+505',\n    languages: {\n      en: 'Nicaragua',\n      tr: 'Nikaragua',\n    },\n  },\n  {\n    name: 'Niger',\n    flag: '🇳🇪',\n    code: 'NE',\n    dial_code: '+227',\n    languages: {\n      en: 'Niger',\n      tr: 'Nijer',\n    },\n  },\n  {\n    name: 'Nigeria',\n    flag: '🇳🇬',\n    code: 'NG',\n    dial_code: '+234',\n    languages: {\n      en: 'Nigeria',\n      tr: 'Nijerya',\n    },\n  },\n  {\n    name: 'Niue',\n    flag: '🇳🇺',\n    code: 'NU',\n    dial_code: '+683',\n    languages: {\n      en: 'Niue',\n      tr: 'Niue',\n    },\n  },\n  {\n    name: 'Norfolk Island',\n    flag: '🇳🇫',\n    code: 'NF',\n    dial_code: '+672',\n    languages: {\n      en: 'Norfolk Island',\n      tr: 'Norfolk Adası',\n    },\n  },\n  {\n    name: 'Northern Mariana Islands',\n    flag: '🇲🇵',\n    code: 'MP',\n    dial_code: '+1670',\n    languages: {\n      en: 'Northern Mariana Islands',\n      tr: 'Kuzey Mariana Adaları',\n    },\n  },\n  {\n    name: 'Norway',\n    flag: '🇳🇴',\n    code: 'NO',\n    dial_code: '+47',\n    languages: {\n      en: 'Norway',\n      tr: 'Norveç',\n    },\n  },\n  {\n    name: 'Oman',\n    flag: '🇴🇲',\n    code: 'OM',\n    dial_code: '+968',\n    languages: {\n      en: 'Oman',\n      tr: 'Umman',\n    },\n  },\n  {\n    name: 'Pakistan',\n    flag: '🇵🇰',\n    code: 'PK',\n    dial_code: '+92',\n    languages: {\n      en: 'Pakistan',\n      tr: 'Pakistan',\n    },\n  },\n  {\n    name: 'Palau',\n    flag: '🇵🇼',\n    code: 'PW',\n    dial_code: '+680',\n    languages: {\n      en: 'Palau',\n      tr: 'Palau',\n    },\n  },\n  {\n    name: 'Palestinian Territory, Occupied',\n    flag: '🇵🇸',\n    code: 'PS',\n    dial_code: '+970',\n    languages: {\n      en: 'Palestinian Territory, Occupied',\n      tr: 'Filistin, Devlet',\n    },\n  },\n  {\n    name: 'Panama',\n    flag: '🇵🇦',\n    code: 'PA',\n    dial_code: '+507',\n    languages: {\n      en: 'Panama',\n      tr: 'Panama',\n    },\n  },\n  {\n    name: 'Papua New Guinea',\n    flag: '🇵🇬',\n    code: 'PG',\n    dial_code: '+675',\n    languages: {\n      en: 'Papua New Guinea',\n      tr: 'Papua Yeni Gine',\n    },\n  },\n  {\n    name: 'Paraguay',\n    flag: '🇵🇾',\n    code: 'PY',\n    dial_code: '+595',\n    languages: {\n      en: 'Paraguay',\n      tr: 'Paraguay',\n    },\n  },\n  {\n    name: 'Peru',\n    flag: '🇵🇪',\n    code: 'PE',\n    dial_code: '+51',\n    languages: {\n      en: 'Peru',\n      tr: 'Peru',\n    },\n  },\n  {\n    name: 'Philippines',\n    flag: '🇵🇭',\n    code: 'PH',\n    dial_code: '+63',\n    languages: {\n      en: 'Philippines',\n      tr: 'Filipinler',\n    },\n  },\n  {\n    name: 'Pitcairn',\n    flag: '🇵🇳',\n    code: 'PN',\n    dial_code: '+64',\n    languages: {\n      en: 'Pitcairn',\n      tr: 'Pitcairn',\n    },\n  },\n  {\n    name: 'Poland',\n    flag: '🇵🇱',\n    code: 'PL',\n    dial_code: '+48',\n    languages: {\n      en: 'Poland',\n      tr: 'Polonya',\n    },\n  },\n  {\n    name: 'Portugal',\n    flag: '🇵🇹',\n    code: 'PT',\n    dial_code: '+351',\n    languages: {\n      en: 'Portugal',\n      tr: 'Portekiz',\n    },\n  },\n  {\n    name: 'Puerto Rico',\n    flag: '🇵🇷',\n    code: 'PR',\n    dial_code: '+1939',\n    languages: {\n      en: 'Puerto Rico',\n      tr: 'Porto Riko',\n    },\n  },\n  {\n    name: 'Qatar',\n    flag: '🇶🇦',\n    code: 'QA',\n    dial_code: '+974',\n    languages: {\n      en: 'Qatar',\n      tr: 'Katar',\n    },\n  },\n  {\n    name: 'Romania',\n    flag: '🇷🇴',\n    code: 'RO',\n    dial_code: '+40',\n    languages: {\n      en: 'Romania',\n      tr: 'Romanya',\n    },\n  },\n  {\n    name: 'Russia',\n    flag: '🇷🇺',\n    code: 'RU',\n    dial_code: '+7',\n    languages: {\n      en: 'Russia',\n      tr: 'Rusya Federasyonu',\n    },\n  },\n  {\n    name: 'Rwanda',\n    flag: '🇷🇼',\n    code: '+250',\n    languages: {\n      en: 'Rwanda',\n      tr: 'Ruanda',\n    },\n  },\n  {\n    name: 'Reunion',\n    flag: '🇷🇪',\n    code: '+262',\n    languages: {\n      en: 'Reunion',\n      tr: 'Reunion',\n    },\n  },\n  {\n    name: 'Saint Barthelemy',\n    flag: '🇧🇱',\n    code: 'BL',\n    dial_code: '+590',\n    languages: {\n      en: 'Saint Barthelemy',\n      tr: 'Saint Barthelemy',\n    },\n  },\n  {\n    name: 'Saint Helena, Ascension and Tristan Da Cunha',\n    flag: '🇸🇭',\n    code: 'SH',\n    dial_code: '+290',\n    languages: {\n      en: 'Saint Helena, Ascension and Tristan Da Cunha',\n      tr: 'Saint Helena, Ascension ve Tristan Da Cunha',\n    },\n  },\n  {\n    name: 'Saint Kitts and Nevis',\n    flag: '🇰🇳',\n    code: 'KN',\n    dial_code: '+1869',\n    languages: {\n      en: 'Saint Kitts and Nevis',\n      tr: 'Saint Kitts ve Nevis',\n    },\n  },\n  {\n    name: 'Saint Lucia',\n    flag: '🇱🇨',\n    code: 'LC',\n    dial_code: '+1758',\n    languages: {\n      en: 'Saint Lucia',\n      tr: 'Saint Lucia',\n    },\n  },\n  {\n    name: 'Saint Martin',\n    flag: '🇲🇫',\n    code: 'MF',\n    dial_code: '+590',\n    languages: {\n      en: 'Saint Martin',\n      tr: 'Saint Martin',\n    },\n  },\n  {\n    name: 'Saint Pierre and Miquelon',\n    flag: '🇵🇲',\n    code: 'PM',\n    dial_code: '+508',\n    languages: {\n      en: 'Saint Pierre and Miquelon',\n      tr: 'Saint Pierre ve Miquelon',\n    },\n  },\n  {\n    name: 'Saint Vincent and the Grenadines',\n    flag: '🇻🇨',\n    code: 'VC',\n    dial_code: '+1784',\n    languages: {\n      en: 'Saint Vincent and the Grenadines',\n      tr: 'Saint Vincent ve Grenadinler',\n    },\n  },\n  {\n    name: 'Samoa',\n    flag: '🇼🇸',\n    code: 'WS',\n    dial_code: '+685',\n    languages: {\n      en: 'Samoa',\n      tr: 'Samoa',\n    },\n  },\n  {\n    name: 'San Marino',\n    flag: '🇸🇲',\n    code: 'SM',\n    dial_code: '+378',\n    languages: {\n      en: 'San Marino',\n      tr: 'San Marino',\n    },\n  },\n  {\n    name: 'Sao Tome and Principe',\n    flag: '🇸🇹',\n    code: 'ST',\n    dial_code: '+239',\n    languages: {\n      en: 'Sao Tome and Principe',\n      tr: 'Sao Tome ve Principe',\n    },\n  },\n  {\n    name: 'Saudi Arabia',\n    flag: '🇸🇦',\n    code: 'SA',\n    dial_code: '+966',\n    languages: {\n      en: 'Saudi Arabia',\n      tr: 'Suudi Arabistan',\n    },\n  },\n  {\n    name: 'Senegal',\n    flag: '🇸🇳',\n    code: 'SN',\n    dial_code: '+221',\n    languages: {\n      en: 'Senegal',\n      tr: 'Senegal',\n    },\n  },\n  {\n    name: 'Serbia',\n    flag: '🇷🇸',\n    code: 'RS',\n    dial_code: '+381',\n    languages: {\n      en: 'Serbia',\n      tr: 'Sırbistan',\n    },\n  },\n  {\n    name: 'Seychelles',\n    flag: '🇸🇨',\n    code: 'SC',\n    dial_code: '+248',\n    languages: {\n      en: 'Seychelles',\n      tr: 'Seyşeller',\n    },\n  },\n  {\n    name: 'Sierra Leone',\n    flag: '🇸🇱',\n    code: 'SL',\n    dial_code: '+232',\n    languages: {\n      en: 'Sierra Leone',\n      tr: 'Sierra Leone',\n    },\n  },\n  {\n    name: 'Singapore',\n    flag: '🇸🇬',\n    code: 'SG',\n    dial_code: '+65',\n    languages: {\n      en: 'Singapore',\n      tr: 'Singapur',\n    },\n  },\n  {\n    name: 'Slovakia',\n    flag: '🇸🇰',\n    code: 'SK',\n    dial_code: '+421',\n    languages: {\n      en: 'Slovakia',\n      tr: 'Slovakya',\n    },\n  },\n  {\n    name: 'Slovenia',\n    flag: '🇸🇮',\n    code: 'SI',\n    dial_code: '+386',\n    languages: {\n      en: 'Slovenia',\n      tr: 'Slovenya',\n    },\n  },\n  {\n    name: 'Solomon Islands',\n    flag: '🇸🇧',\n    code: 'SB',\n    dial_code: '+677',\n    languages: {\n      en: 'Solomon Islands',\n      tr: 'Solomon Adaları',\n    },\n  },\n  {\n    name: 'Somalia',\n    flag: '🇸🇴',\n    code: 'SO',\n    dial_code: '+252',\n    languages: {\n      en: 'Somalia',\n      tr: 'Somali',\n    },\n  },\n  {\n    name: 'South Africa',\n    flag: '🇿🇦',\n    code: 'ZA',\n    dial_code: '+27',\n    languages: {\n      en: 'South Africa',\n      tr: 'Güney Afrika',\n    },\n  },\n  {\n    name: 'South Georgia and the South Sandwich Islands',\n    flag: '🇬🇸',\n    code: 'GS',\n    dial_code: '+500',\n    languages: {\n      en: 'South Georgia and the South Sandwich Islands',\n      tr: 'Güney Georgia ve Güney Sandwich Adaları',\n    },\n  },\n  {\n    name: 'Spain',\n    flag: '🇪🇸',\n    code: 'ES',\n    dial_code: '+34',\n    languages: {\n      en: 'Spain',\n      tr: 'İspanya',\n    },\n  },\n  {\n    name: 'Sri Lanka',\n    flag: '🇱🇰',\n    code: 'LK',\n    dial_code: '+94',\n    languages: {\n      en: 'Sri Lanka',\n      tr: 'Sri Lanka',\n    },\n  },\n  {\n    name: 'Sudan',\n    flag: '🇸🇩',\n    code: 'SD',\n    dial_code: '+249',\n    languages: {\n      en: 'Sudan',\n      tr: 'Sudan',\n    },\n  },\n  {\n    name: 'Suriname',\n    flag: '🇸🇷',\n    code: 'SR',\n    dial_code: '+597',\n    languages: {\n      en: 'Suriname',\n      tr: 'Surinam',\n    },\n  },\n  {\n    name: 'Swaziland',\n    flag: '🇸🇿',\n    code: 'SZ',\n    dial_code: '+268',\n    languages: {\n      en: 'Swaziland',\n      tr: 'Svaziland',\n    },\n  },\n  {\n    name: 'Sweden',\n    flag: '🇸🇪',\n    code: 'SE',\n    dial_code: '+46',\n    languages: {\n      en: 'Sweden',\n      tr: 'İsveç',\n    },\n  },\n  {\n    name: 'Switzerland',\n    flag: '🇨🇭',\n    code: 'CH',\n    dial_code: '+41',\n    languages: {\n      en: 'Switzerland',\n      tr: 'İsviçre',\n    },\n  },\n  {\n    name: 'Syrian Arab Republic',\n    flag: '🇸🇾',\n    code: 'SY',\n    dial_code: '+963',\n    languages: {\n      en: 'Syrian Arab Republic',\n      tr: 'Suriye Arap Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Taiwan, Province of China',\n    flag: '🇹🇼',\n    code: 'TW',\n    dial_code: '+886',\n    languages: {\n      en: 'Taiwan, Province of China',\n      tr: 'Tayvan, Çin',\n    },\n  },\n  {\n    name: 'Tajikistan',\n    flag: '🇹🇯',\n    code: 'TJ',\n    dial_code: '+992',\n    languages: {\n      en: 'Tajikistan',\n      tr: 'Tacikistan',\n    },\n  },\n  {\n    name: 'Tanzania, United Republic of Tanzania',\n    flag: '🇹🇿',\n    code: 'TZ',\n    dial_code: '+255',\n    languages: {\n      en: 'Tanzania, United Republic of Tanzania',\n      tr: 'Tanzanya, Birleşik Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Thailand',\n    flag: '🇹🇭',\n    code: 'TH',\n    dial_code: '+66',\n    languages: {\n      en: 'Thailand',\n      tr: 'Tayland',\n    },\n  },\n  {\n    name: 'Timor-Leste',\n    flag: '🇹🇱',\n    code: 'TL',\n    dial_code: '+670',\n    languages: {\n      en: 'Timor-Leste',\n      tr: 'Doğu Timor',\n    },\n  },\n  {\n    name: 'Togo',\n    flag: '🇹🇬',\n    code: 'TG',\n    dial_code: '+228',\n    languages: {\n      en: 'Togo',\n      tr: 'Gitmek',\n    },\n  },\n  {\n    name: 'Tokelau',\n    flag: '🇹🇰',\n    code: 'TK',\n    dial_code: '+690',\n    languages: {\n      en: 'Tokelau',\n      tr: 'Tokelau',\n    },\n  },\n  {\n    name: 'Tonga',\n    flag: '🇹🇴',\n    code: 'TO',\n    dial_code: '+676',\n    languages: {\n      en: 'Tonga',\n      tr: 'Tonga',\n    },\n  },\n  {\n    name: 'Trinidad and Tobago',\n    flag: '🇹🇹',\n    code: 'TT',\n    dial_code: '+1868',\n    languages: {\n      en: 'Trinidad and Tobago',\n      tr: 'Trinidad ve Tobago',\n    },\n  },\n  {\n    name: 'Tunisia',\n    flag: '🇹🇳',\n    code: 'TN',\n    dial_code: '+216',\n    languages: {\n      en: 'Tunisia',\n      tr: 'Tunus',\n    },\n  },\n  {\n    name: 'Turkey',\n    flag: '🇹🇷',\n    code: 'TR',\n    dial_code: '+90',\n    languages: {\n      en: 'Turkey',\n      tr: 'Türkiye',\n    },\n  },\n  {\n    name: 'Turkmenistan',\n    flag: '🇹🇲',\n    code: 'TM',\n    dial_code: '+993',\n    languages: {\n      en: 'Turkmenistan',\n      tr: 'Türkmenistan',\n    },\n  },\n  {\n    name: 'Turks and Caicos Islands',\n    flag: '🇹🇨',\n    code: 'TC',\n    dial_code: '+1649',\n    languages: {\n      en: 'Turks and Caicos Islands',\n      tr: 'Turks ve Caicos Adaları',\n    },\n  },\n  {\n    name: 'Tuvalu',\n    flag: '🇹🇻',\n    code: 'TV',\n    dial_code: '+688',\n    languages: {\n      en: 'Tuvalu',\n      tr: 'Tuvalu',\n    },\n  },\n  {\n    name: 'Uganda',\n    flag: '🇺🇬',\n    code: 'UG',\n    dial_code: '+256',\n    languages: {\n      en: 'Uganda',\n      tr: 'Uganda',\n    },\n  },\n  {\n    name: 'Ukraine',\n    flag: '🇺🇦',\n    code: 'UA',\n    dial_code: '+380',\n    languages: {\n      en: 'Ukraine',\n      tr: 'Ukrayna',\n    },\n  },\n  {\n    name: 'United Arab Emirates',\n    flag: '🇦🇪',\n    code: 'AE',\n    dial_code: '+971',\n    languages: {\n      en: 'United Arab Emirates',\n      tr: 'Birleşik Arap Emirlikleri',\n    },\n  },\n  {\n    name: 'United Kingdom',\n    flag: '🇬🇧',\n    code: 'GB',\n    dial_code: '+44',\n    languages: {\n      en: 'United Kingdom',\n      tr: 'Birleşik Krallık',\n    },\n  },\n  {\n    name: 'United States',\n    flag: '🇺🇸',\n    code: 'US',\n    dial_code: '+1',\n    languages: {\n      en: 'United States',\n      tr: 'Amerika Birleşik Devletleri',\n    },\n  },\n  {\n    name: 'Uruguay',\n    flag: '🇺🇾',\n    code: 'UY',\n    dial_code: '+598',\n    languages: {\n      en: 'Uruguay',\n      tr: 'Uruguay',\n    },\n  },\n  {\n    name: 'Uzbekistan',\n    flag: '🇺🇿',\n    code: 'UZ',\n    dial_code: '+998',\n    languages: {\n      en: 'Uzbekistan',\n      tr: 'Özbekistan',\n    },\n  },\n  {\n    name: 'Vanuatu',\n    flag: '🇻🇺',\n    code: 'VU',\n    dial_code: '+678',\n    languages: {\n      en: 'Vanuatu',\n      tr: 'Vanuatu',\n    },\n  },\n  {\n    name: 'Venezuela, Bolivarian Republic of Venezuela',\n    flag: '🇻🇪',\n    code: 'VE',\n    dial_code: '+58',\n    languages: {\n      en: 'Venezuela, Bolivarian Republic of Venezuela',\n      tr: 'Venezuela, Bolivarcı Cumhuriyeti',\n    },\n  },\n  {\n    name: 'Vietnam',\n    flag: '🇻🇳',\n    code: 'VN',\n    dial_code: '+84',\n    languages: {\n      en: 'Vietnam',\n      tr: 'Vietnam',\n    },\n  },\n  {\n    name: 'Virgin Islands, British',\n    flag: '🇻🇬',\n    code: 'VG',\n    dial_code: '+1284',\n    languages: {\n      en: 'Virgin Islands, British',\n      tr: 'Virgin Adaları, Britanya',\n    },\n  },\n  {\n    name: 'Virgin Islands, U.S.',\n    flag: '🇻🇮',\n    code: 'VI',\n    dial_code: '+1340',\n    languages: {\n      en: 'Virgin Islands, U.S.',\n      tr: 'Virgin Adaları, ABD',\n    },\n  },\n  {\n    name: 'Western Sahara',\n    flag: '🇪🇭',\n    code: 'EH',\n    dial_code: '+212',\n    languages: {\n      en: 'Western Sahara',\n      tr: 'Batı Sahara',\n    },\n  },\n  {\n    name: 'Yemen',\n    flag: '🇾🇪',\n    code: 'YE',\n    dial_code: '+967',\n    languages: {\n      en: 'Yemen',\n      tr: 'Yemen',\n    },\n  },\n  {\n    name: 'Zambia',\n    flag: '🇿🇲',\n    code: 'ZM',\n    dial_code: '+260',\n    languages: {\n      en: 'Zambia',\n      tr: 'Zambiya',\n    },\n  },\n  {\n    name: 'Zimbabwe',\n    flag: '🇿🇼',\n    code: 'ZW',\n    dial_code: '+263',\n    languages: {\n      en: 'Zimbabwe',\n      tr: 'Zimbabve',\n    },\n  },\n]"
                }
            ],
            "src/app/core/configs/route.config.ts": [
                {
                    "name": "routeConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/configs/route.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  login: { title: 'Login' },\n  home: {\n    title: 'Home',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  transaction: {\n    title: 'Transactions',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  'hofi-card': {\n    title: 'Hofi Card',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  account: {\n    title: 'Account',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  profile: {\n    title: 'Profile',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  settings: {\n    title: 'Settings',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  support: {\n    title: 'Support',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  deposit: {\n    title: 'Deposit',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  transfer: {\n    title: 'Pay & Transfer',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  // register\n  register: {\n    title: 'Register',\n  },\n  // forgot password\n  'send-code': {\n    title: 'Forgot Password',\n  },\n  'terms-conditions': {\n    title: 'Terms & Conditions',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  'privay-policy': {\n    title: 'privay-policy',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n  'complaints-procedures': {\n    title: 'complaints-procedures',\n    permissions: {\n      only: [Permission.APP_ACCESS],\n      redirectTo: systemConfig.unauthorizedRedirectTo,\n    },\n  },\n\n  'code-sent': {\n    title: 'Check your inbox',\n  },\n  'enter-code': {\n    title: 'Enter Code',\n  },\n  reset: {\n    title: 'Reset Password',\n  },\n}"
                }
            ],
            "src/app/shared/animation.ts": [
                {
                    "name": "slideInAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/animation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('routeAnimations', [\n  transition('* <=> *', [\n    style({ position: 'relative' }),\n    query(\n      ':enter, :leave',\n      [\n        style({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n        }),\n      ],\n      { optional: true }\n    ),\n    query(':enter', [style({ left: '100%' })], { optional: true }),\n    group([\n      query(':leave', [animate('300ms ease-out', style({ left: '-100%' }))], {\n        optional: true,\n      }),\n      query(':enter', [animate('300ms ease-out', style({ left: '0%' }))], {\n        optional: true,\n      }),\n    ]),\n  ]),\n])"
                }
            ],
            "src/app/core/configs/system.config.ts": [
                {
                    "name": "systemConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/configs/system.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  loginUrl: '/login',\n  unauthorizedRedirectTo: '/welcome',\n  authStorageType: 'local',\n  authServiceKey: 'authServiceKey',\n  siteTitle: 'Financial House',\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/core/enum/index.ts": [
                {
                    "name": "Permission",
                    "childs": [
                        {
                            "name": "APP_ACCESS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "APP_ACCESS"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/enum/index.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/configs/route.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routeConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/configs/system.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "systemConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/register/register.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IReqLogin",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/register/register.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IResLogin",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/register/register.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegisterService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/sign-in/sign-in.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IReqLogin",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/sign-in/sign-in.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IResLogin",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/sign-in/sign-in.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SignInService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/transaction/transaction.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TransactionService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/http/user/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/clipboard.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClipboardService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/strong-password.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StrongPasswordService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/validators.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidatorService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/public/otp/otp.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OtpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/public/register/create-password/create-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/public/register/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/public/register/verify-email/verify-email.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VerifyEmailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/public/sign-in/sign-in.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "slideInAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/container/container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/inputs/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/inputs/pin-input/pin-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PinInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/layouts/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/layouts/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/layouts/side-bar/side-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SideBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/password-validation/password-validation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordValidationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/switch/switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authServiceKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/client-token.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClientTokenService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/register-redirect.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegisterRedirectService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/theme.services.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/countries.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Countries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}